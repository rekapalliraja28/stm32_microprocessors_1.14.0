
LED3_switch1_register_07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000488  08000488  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000488  08000488  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000488  08000488  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000488  08000488  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000488  08000488  00010488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800048c  0800048c  0001048c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000490  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000494  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000494  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000135f  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004c2  00000000  00000000  000213d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c8  00000000  00000000  00021898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000013f  00000000  00000000  00021a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f697  00000000  00000000  00021b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001eab  00000000  00000000  00041236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c311c  00000000  00000000  000430e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000554  00000000  00000000  00106200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00106754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000470 	.word	0x08000470

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000470 	.word	0x08000470

08000204 <main>:
#define DEBOUNCE_DELAY 100

void delay(int milliseconds);

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
    //int switchState = 0; // Variable to store the state of the switch press
    int numPresses = 0; // Variable to store the number of times the switch is pressed
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]

    // Enable clock for GPIOA and GPIOB
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 800020e:	4b39      	ldr	r3, [pc, #228]	; (80002f4 <main+0xf0>)
 8000210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000212:	4a38      	ldr	r2, [pc, #224]	; (80002f4 <main+0xf0>)
 8000214:	f043 0303 	orr.w	r3, r3, #3
 8000218:	6313      	str	r3, [r2, #48]	; 0x30

    // Configure PA7, PA8, and PA9 as output (LEDs)
    GPIOA->MODER |= GPIO_MODER_MODE7_0 | GPIO_MODER_MODE8_0 | GPIO_MODER_MODE9_0;
 800021a:	4b37      	ldr	r3, [pc, #220]	; (80002f8 <main+0xf4>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a36      	ldr	r2, [pc, #216]	; (80002f8 <main+0xf4>)
 8000220:	f443 23a8 	orr.w	r3, r3, #344064	; 0x54000
 8000224:	6013      	str	r3, [r2, #0]

    // Configure PB8 as input (Switch)
    GPIOB->MODER &= ~(GPIO_MODER_MODE8_Msk);  // Clear the bits for PB8
 8000226:	4b35      	ldr	r3, [pc, #212]	; (80002fc <main+0xf8>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4a34      	ldr	r2, [pc, #208]	; (80002fc <main+0xf8>)
 800022c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000230:	6013      	str	r3, [r2, #0]

    while(1)
    {
        if(GPIOB->IDR & GPIO_IDR_ID8)
 8000232:	4b32      	ldr	r3, [pc, #200]	; (80002fc <main+0xf8>)
 8000234:	691b      	ldr	r3, [r3, #16]
 8000236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800023a:	2b00      	cmp	r3, #0
 800023c:	d0f9      	beq.n	8000232 <main+0x2e>
        {
            delay(DEBOUNCE_DELAY); // Debounce delay
 800023e:	2064      	movs	r0, #100	; 0x64
 8000240:	f000 f85e 	bl	8000300 <delay>

            if(GPIOB->IDR & GPIO_IDR_ID8) // Check again if the switch is still pressed
 8000244:	4b2d      	ldr	r3, [pc, #180]	; (80002fc <main+0xf8>)
 8000246:	691b      	ldr	r3, [r3, #16]
 8000248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800024c:	2b00      	cmp	r3, #0
 800024e:	d048      	beq.n	80002e2 <main+0xde>
            {
                numPresses++; // Increment number of presses
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	3301      	adds	r3, #1
 8000254:	607b      	str	r3, [r7, #4]

                switch (numPresses)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2b03      	cmp	r3, #3
 800025a:	d029      	beq.n	80002b0 <main+0xac>
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b03      	cmp	r3, #3
 8000260:	dc36      	bgt.n	80002d0 <main+0xcc>
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2b01      	cmp	r3, #1
 8000266:	d003      	beq.n	8000270 <main+0x6c>
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2b02      	cmp	r3, #2
 800026c:	d010      	beq.n	8000290 <main+0x8c>
 800026e:	e02f      	b.n	80002d0 <main+0xcc>
                {
                    case 1:
                        GPIOA->BSRR |= GPIO_BSRR_BS7;
 8000270:	4b21      	ldr	r3, [pc, #132]	; (80002f8 <main+0xf4>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	4a20      	ldr	r2, [pc, #128]	; (80002f8 <main+0xf4>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6193      	str	r3, [r2, #24]
                        delay(DEBOUNCE_DELAY);
 800027c:	2064      	movs	r0, #100	; 0x64
 800027e:	f000 f83f 	bl	8000300 <delay>
                        GPIOA->BSRR |= GPIO_BSRR_BR7;
 8000282:	4b1d      	ldr	r3, [pc, #116]	; (80002f8 <main+0xf4>)
 8000284:	699b      	ldr	r3, [r3, #24]
 8000286:	4a1c      	ldr	r2, [pc, #112]	; (80002f8 <main+0xf4>)
 8000288:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800028c:	6193      	str	r3, [r2, #24]
                        break;
 800028e:	e028      	b.n	80002e2 <main+0xde>
                    case 2:
                        GPIOA->BSRR |= GPIO_BSRR_BS8;
 8000290:	4b19      	ldr	r3, [pc, #100]	; (80002f8 <main+0xf4>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	4a18      	ldr	r2, [pc, #96]	; (80002f8 <main+0xf4>)
 8000296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800029a:	6193      	str	r3, [r2, #24]
                        delay(DEBOUNCE_DELAY);
 800029c:	2064      	movs	r0, #100	; 0x64
 800029e:	f000 f82f 	bl	8000300 <delay>
                        GPIOA->BSRR |= GPIO_BSRR_BR8;
 80002a2:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <main+0xf4>)
 80002a4:	699b      	ldr	r3, [r3, #24]
 80002a6:	4a14      	ldr	r2, [pc, #80]	; (80002f8 <main+0xf4>)
 80002a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002ac:	6193      	str	r3, [r2, #24]
                        break;
 80002ae:	e018      	b.n	80002e2 <main+0xde>
                    case 3:
                        GPIOA->BSRR |= GPIO_BSRR_BS9;
 80002b0:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <main+0xf4>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a10      	ldr	r2, [pc, #64]	; (80002f8 <main+0xf4>)
 80002b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ba:	6193      	str	r3, [r2, #24]
                        delay(DEBOUNCE_DELAY);
 80002bc:	2064      	movs	r0, #100	; 0x64
 80002be:	f000 f81f 	bl	8000300 <delay>
                        GPIOA->BSRR |= GPIO_BSRR_BR9;
 80002c2:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <main+0xf4>)
 80002c4:	699b      	ldr	r3, [r3, #24]
 80002c6:	4a0c      	ldr	r2, [pc, #48]	; (80002f8 <main+0xf4>)
 80002c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002cc:	6193      	str	r3, [r2, #24]
                        break;
 80002ce:	e008      	b.n	80002e2 <main+0xde>
                    default:
                        numPresses = 0; // Reset numPresses after the third press
 80002d0:	2300      	movs	r3, #0
 80002d2:	607b      	str	r3, [r7, #4]
                        GPIOA->BSRR |= GPIO_BSRR_BR7 | GPIO_BSRR_BR8 | GPIO_BSRR_BR9; // Turn off all LEDs
 80002d4:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <main+0xf4>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a07      	ldr	r2, [pc, #28]	; (80002f8 <main+0xf4>)
 80002da:	f043 7360 	orr.w	r3, r3, #58720256	; 0x3800000
 80002de:	6193      	str	r3, [r2, #24]
                        break;
 80002e0:	bf00      	nop
                }
            }

            while(GPIOB->IDR & GPIO_IDR_ID8); // Wait until the switch is released
 80002e2:	bf00      	nop
 80002e4:	4b05      	ldr	r3, [pc, #20]	; (80002fc <main+0xf8>)
 80002e6:	691b      	ldr	r3, [r3, #16]
 80002e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d1f9      	bne.n	80002e4 <main+0xe0>
        if(GPIOB->IDR & GPIO_IDR_ID8)
 80002f0:	e79f      	b.n	8000232 <main+0x2e>
 80002f2:	bf00      	nop
 80002f4:	40023800 	.word	0x40023800
 80002f8:	40020000 	.word	0x40020000
 80002fc:	40020400 	.word	0x40020400

08000300 <delay>:
    return 0;
}

// Simple delay function
void delay(int milliseconds)
{
 8000300:	b480      	push	{r7}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < milliseconds * 1000; i++);
 8000308:	2300      	movs	r3, #0
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	e002      	b.n	8000314 <delay+0x14>
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	3301      	adds	r3, #1
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800031a:	fb02 f303 	mul.w	r3, r2, r3
 800031e:	68fa      	ldr	r2, [r7, #12]
 8000320:	429a      	cmp	r2, r3
 8000322:	dbf4      	blt.n	800030e <delay+0xe>
}
 8000324:	bf00      	nop
 8000326:	bf00      	nop
 8000328:	3714      	adds	r7, #20
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr

08000332 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000336:	e7fe      	b.n	8000336 <NMI_Handler+0x4>

08000338 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800033c:	e7fe      	b.n	800033c <HardFault_Handler+0x4>

0800033e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000342:	e7fe      	b.n	8000342 <MemManage_Handler+0x4>

08000344 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000348:	e7fe      	b.n	8000348 <BusFault_Handler+0x4>

0800034a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800034a:	b480      	push	{r7}
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800034e:	e7fe      	b.n	800034e <UsageFault_Handler+0x4>

08000350 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr

0800035e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000362:	bf00      	nop
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr

0800036c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800037a:	b580      	push	{r7, lr}
 800037c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800037e:	f000 f83f 	bl	8000400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <SystemInit+0x20>)
 800038e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000392:	4a05      	ldr	r2, [pc, #20]	; (80003a8 <SystemInit+0x20>)
 8000394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	e000ed00 	.word	0xe000ed00

080003ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80003b0:	f7ff ffea 	bl	8000388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003b4:	480c      	ldr	r0, [pc, #48]	; (80003e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003b6:	490d      	ldr	r1, [pc, #52]	; (80003ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003b8:	4a0d      	ldr	r2, [pc, #52]	; (80003f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003bc:	e002      	b.n	80003c4 <LoopCopyDataInit>

080003be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003c2:	3304      	adds	r3, #4

080003c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c8:	d3f9      	bcc.n	80003be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ca:	4a0a      	ldr	r2, [pc, #40]	; (80003f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003cc:	4c0a      	ldr	r4, [pc, #40]	; (80003f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d0:	e001      	b.n	80003d6 <LoopFillZerobss>

080003d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d4:	3204      	adds	r2, #4

080003d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d8:	d3fb      	bcc.n	80003d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80003da:	f000 f825 	bl	8000428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003de:	f7ff ff11 	bl	8000204 <main>
  bx  lr    
 80003e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ec:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003f0:	08000490 	.word	0x08000490
  ldr r2, =_sbss
 80003f4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003f8:	20000024 	.word	0x20000024

080003fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003fc:	e7fe      	b.n	80003fc <ADC_IRQHandler>
	...

08000400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <HAL_IncTick+0x20>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	461a      	mov	r2, r3
 800040a:	4b06      	ldr	r3, [pc, #24]	; (8000424 <HAL_IncTick+0x24>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4413      	add	r3, r2
 8000410:	4a04      	ldr	r2, [pc, #16]	; (8000424 <HAL_IncTick+0x24>)
 8000412:	6013      	str	r3, [r2, #0]
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	20000000 	.word	0x20000000
 8000424:	20000020 	.word	0x20000020

08000428 <__libc_init_array>:
 8000428:	b570      	push	{r4, r5, r6, lr}
 800042a:	4d0d      	ldr	r5, [pc, #52]	; (8000460 <__libc_init_array+0x38>)
 800042c:	4c0d      	ldr	r4, [pc, #52]	; (8000464 <__libc_init_array+0x3c>)
 800042e:	1b64      	subs	r4, r4, r5
 8000430:	10a4      	asrs	r4, r4, #2
 8000432:	2600      	movs	r6, #0
 8000434:	42a6      	cmp	r6, r4
 8000436:	d109      	bne.n	800044c <__libc_init_array+0x24>
 8000438:	4d0b      	ldr	r5, [pc, #44]	; (8000468 <__libc_init_array+0x40>)
 800043a:	4c0c      	ldr	r4, [pc, #48]	; (800046c <__libc_init_array+0x44>)
 800043c:	f000 f818 	bl	8000470 <_init>
 8000440:	1b64      	subs	r4, r4, r5
 8000442:	10a4      	asrs	r4, r4, #2
 8000444:	2600      	movs	r6, #0
 8000446:	42a6      	cmp	r6, r4
 8000448:	d105      	bne.n	8000456 <__libc_init_array+0x2e>
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000450:	4798      	blx	r3
 8000452:	3601      	adds	r6, #1
 8000454:	e7ee      	b.n	8000434 <__libc_init_array+0xc>
 8000456:	f855 3b04 	ldr.w	r3, [r5], #4
 800045a:	4798      	blx	r3
 800045c:	3601      	adds	r6, #1
 800045e:	e7f2      	b.n	8000446 <__libc_init_array+0x1e>
 8000460:	08000488 	.word	0x08000488
 8000464:	08000488 	.word	0x08000488
 8000468:	08000488 	.word	0x08000488
 800046c:	0800048c 	.word	0x0800048c

08000470 <_init>:
 8000470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000472:	bf00      	nop
 8000474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000476:	bc08      	pop	{r3}
 8000478:	469e      	mov	lr, r3
 800047a:	4770      	bx	lr

0800047c <_fini>:
 800047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047e:	bf00      	nop
 8000480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000482:	bc08      	pop	{r3}
 8000484:	469e      	mov	lr, r3
 8000486:	4770      	bx	lr
