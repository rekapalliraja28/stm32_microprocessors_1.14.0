
Internal_LED_10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000260  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000424  08000424  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000424  08000424  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000424  08000424  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000424  08000424  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000424  08000424  00010424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000428  08000428  00010428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800042c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000430  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000430  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001387  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004d4  00000000  00000000  000213fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d0  00000000  00000000  000218d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000144  00000000  00000000  00021aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f691  00000000  00000000  00021bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001ea5  00000000  00000000  0004127d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3105  00000000  00000000  00043122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000574  00000000  00000000  00106228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010679c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800040c 	.word	0x0800040c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	0800040c 	.word	0x0800040c

08000204 <delay>:
#include "stm32f4xx.h"

void delay(uint32_t ms) {
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
    uint32_t i, j;
    for (i = 0; i < ms; i++)
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
 8000210:	e00c      	b.n	800022c <delay+0x28>
        for (j = 0; j < 2000; j++) {} // Adjust this loop for your clock frequency
 8000212:	2300      	movs	r3, #0
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	e002      	b.n	800021e <delay+0x1a>
 8000218:	68bb      	ldr	r3, [r7, #8]
 800021a:	3301      	adds	r3, #1
 800021c:	60bb      	str	r3, [r7, #8]
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000224:	d3f8      	bcc.n	8000218 <delay+0x14>
    for (i = 0; i < ms; i++)
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	3301      	adds	r3, #1
 800022a:	60fb      	str	r3, [r7, #12]
 800022c:	68fa      	ldr	r2, [r7, #12]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	429a      	cmp	r2, r3
 8000232:	d3ee      	bcc.n	8000212 <delay+0xe>
}
 8000234:	bf00      	nop
 8000236:	bf00      	nop
 8000238:	3714      	adds	r7, #20
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
	...

08000244 <GPIO_Init>:

void GPIO_Init(void) {
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN; // Enable GPIOA and GPIOC clock
 8000248:	4b08      	ldr	r3, [pc, #32]	; (800026c <GPIO_Init+0x28>)
 800024a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024c:	4a07      	ldr	r2, [pc, #28]	; (800026c <GPIO_Init+0x28>)
 800024e:	f043 0305 	orr.w	r3, r3, #5
 8000252:	6313      	str	r3, [r2, #48]	; 0x30

    // Configure LED pin (PA5) as output
    GPIOA->MODER |= (1 << (5 * 2)); // Set pin as output
 8000254:	4b06      	ldr	r3, [pc, #24]	; (8000270 <GPIO_Init+0x2c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a05      	ldr	r2, [pc, #20]	; (8000270 <GPIO_Init+0x2c>)
 800025a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800025e:	6013      	str	r3, [r2, #0]
}
 8000260:	bf00      	nop
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	40023800 	.word	0x40023800
 8000270:	40020000 	.word	0x40020000

08000274 <main>:

int main(void) {
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
    GPIO_Init();
 800027a:	f7ff ffe3 	bl	8000244 <GPIO_Init>

    uint8_t switch_press_count = 0;
 800027e:	2300      	movs	r3, #0
 8000280:	71fb      	strb	r3, [r7, #7]

    while (1) {
        /* Check if the switch is pressed */
        if (!(GPIOC->IDR & (1 << 13))) {
 8000282:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <main+0x54>)
 8000284:	691b      	ldr	r3, [r3, #16]
 8000286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800028a:	2b00      	cmp	r3, #0
 800028c:	d1f9      	bne.n	8000282 <main+0xe>
            delay(50); // Debouncing
 800028e:	2032      	movs	r0, #50	; 0x32
 8000290:	f7ff ffb8 	bl	8000204 <delay>
            switch_press_count++;
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	3301      	adds	r3, #1
 8000298:	71fb      	strb	r3, [r7, #7]

            /* Toggle LED based on switch press count */
            if (switch_press_count % 2 != 0) {
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	f003 0301 	and.w	r3, r3, #1
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d003      	beq.n	80002ae <main+0x3a>
                GPIOA->BSRR = (1 << 5); // LED ON
 80002a6:	4b09      	ldr	r3, [pc, #36]	; (80002cc <main+0x58>)
 80002a8:	2220      	movs	r2, #32
 80002aa:	619a      	str	r2, [r3, #24]
 80002ac:	e003      	b.n	80002b6 <main+0x42>
            } else {
                GPIOA->BSRR = (1 << (5 + 16)); // LED OFF
 80002ae:	4b07      	ldr	r3, [pc, #28]	; (80002cc <main+0x58>)
 80002b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80002b4:	619a      	str	r2, [r3, #24]
            }

            /* Wait until switch is released */
            while (!(GPIOC->IDR & (1 << 13))) {}
 80002b6:	bf00      	nop
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <main+0x54>)
 80002ba:	691b      	ldr	r3, [r3, #16]
 80002bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d0f9      	beq.n	80002b8 <main+0x44>
        if (!(GPIOC->IDR & (1 << 13))) {
 80002c4:	e7dd      	b.n	8000282 <main+0xe>
 80002c6:	bf00      	nop
 80002c8:	40020800 	.word	0x40020800
 80002cc:	40020000 	.word	0x40020000

080002d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002d4:	e7fe      	b.n	80002d4 <NMI_Handler+0x4>

080002d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002d6:	b480      	push	{r7}
 80002d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002da:	e7fe      	b.n	80002da <HardFault_Handler+0x4>

080002dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002e0:	e7fe      	b.n	80002e0 <MemManage_Handler+0x4>

080002e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002e2:	b480      	push	{r7}
 80002e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002e6:	e7fe      	b.n	80002e6 <BusFault_Handler+0x4>

080002e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002ec:	e7fe      	b.n	80002ec <UsageFault_Handler+0x4>

080002ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002ee:	b480      	push	{r7}
 80002f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002f2:	bf00      	nop
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr

080002fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr

0800030a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800030a:	b480      	push	{r7}
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800030e:	bf00      	nop
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800031c:	f000 f83e 	bl	800039c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}

08000324 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <SystemInit+0x20>)
 800032a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800032e:	4a05      	ldr	r2, [pc, #20]	; (8000344 <SystemInit+0x20>)
 8000330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	e000ed00 	.word	0xe000ed00

08000348 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000348:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000380 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800034c:	f7ff ffea 	bl	8000324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000350:	480c      	ldr	r0, [pc, #48]	; (8000384 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000352:	490d      	ldr	r1, [pc, #52]	; (8000388 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000354:	4a0d      	ldr	r2, [pc, #52]	; (800038c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000358:	e002      	b.n	8000360 <LoopCopyDataInit>

0800035a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800035c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035e:	3304      	adds	r3, #4

08000360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000364:	d3f9      	bcc.n	800035a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000366:	4a0a      	ldr	r2, [pc, #40]	; (8000390 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000368:	4c0a      	ldr	r4, [pc, #40]	; (8000394 <LoopFillZerobss+0x22>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800036c:	e001      	b.n	8000372 <LoopFillZerobss>

0800036e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000370:	3204      	adds	r2, #4

08000372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000374:	d3fb      	bcc.n	800036e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000376:	f000 f825 	bl	80003c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800037a:	f7ff ff7b 	bl	8000274 <main>
  bx  lr    
 800037e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000380:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000388:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800038c:	0800042c 	.word	0x0800042c
  ldr r2, =_sbss
 8000390:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000394:	20000024 	.word	0x20000024

08000398 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000398:	e7fe      	b.n	8000398 <ADC_IRQHandler>
	...

0800039c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <HAL_IncTick+0x20>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	461a      	mov	r2, r3
 80003a6:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <HAL_IncTick+0x24>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4413      	add	r3, r2
 80003ac:	4a04      	ldr	r2, [pc, #16]	; (80003c0 <HAL_IncTick+0x24>)
 80003ae:	6013      	str	r3, [r2, #0]
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	20000000 	.word	0x20000000
 80003c0:	20000020 	.word	0x20000020

080003c4 <__libc_init_array>:
 80003c4:	b570      	push	{r4, r5, r6, lr}
 80003c6:	4d0d      	ldr	r5, [pc, #52]	; (80003fc <__libc_init_array+0x38>)
 80003c8:	4c0d      	ldr	r4, [pc, #52]	; (8000400 <__libc_init_array+0x3c>)
 80003ca:	1b64      	subs	r4, r4, r5
 80003cc:	10a4      	asrs	r4, r4, #2
 80003ce:	2600      	movs	r6, #0
 80003d0:	42a6      	cmp	r6, r4
 80003d2:	d109      	bne.n	80003e8 <__libc_init_array+0x24>
 80003d4:	4d0b      	ldr	r5, [pc, #44]	; (8000404 <__libc_init_array+0x40>)
 80003d6:	4c0c      	ldr	r4, [pc, #48]	; (8000408 <__libc_init_array+0x44>)
 80003d8:	f000 f818 	bl	800040c <_init>
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	10a4      	asrs	r4, r4, #2
 80003e0:	2600      	movs	r6, #0
 80003e2:	42a6      	cmp	r6, r4
 80003e4:	d105      	bne.n	80003f2 <__libc_init_array+0x2e>
 80003e6:	bd70      	pop	{r4, r5, r6, pc}
 80003e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ec:	4798      	blx	r3
 80003ee:	3601      	adds	r6, #1
 80003f0:	e7ee      	b.n	80003d0 <__libc_init_array+0xc>
 80003f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f6:	4798      	blx	r3
 80003f8:	3601      	adds	r6, #1
 80003fa:	e7f2      	b.n	80003e2 <__libc_init_array+0x1e>
 80003fc:	08000424 	.word	0x08000424
 8000400:	08000424 	.word	0x08000424
 8000404:	08000424 	.word	0x08000424
 8000408:	08000428 	.word	0x08000428

0800040c <_init>:
 800040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040e:	bf00      	nop
 8000410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000412:	bc08      	pop	{r3}
 8000414:	469e      	mov	lr, r3
 8000416:	4770      	bx	lr

08000418 <_fini>:
 8000418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041a:	bf00      	nop
 800041c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041e:	bc08      	pop	{r3}
 8000420:	469e      	mov	lr, r3
 8000422:	4770      	bx	lr
