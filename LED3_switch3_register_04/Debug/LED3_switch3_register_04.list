
LED3_switch3_register_04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000294  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000458  08000458  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000458  08000458  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000458  08000458  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000458  08000458  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000458  08000458  00010458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800045c  0800045c  0001045c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000460  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000464  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000464  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000134f  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004b1  00000000  00000000  000213c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c8  00000000  00000000  00021878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000013f  00000000  00000000  00021a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f691  00000000  00000000  00021b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001e74  00000000  00000000  00041210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c30fe  00000000  00000000  00043084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000550  00000000  00000000  00106184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001066d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000440 	.word	0x08000440

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000440 	.word	0x08000440

08000204 <main>:
#include "stm32f4xx.h"

void delay(int milliseconds);

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA, GPIOB, and GPIOC
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;
 8000208:	4b2d      	ldr	r3, [pc, #180]	; (80002c0 <main+0xbc>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a2c      	ldr	r2, [pc, #176]	; (80002c0 <main+0xbc>)
 800020e:	f043 0307 	orr.w	r3, r3, #7
 8000212:	6313      	str	r3, [r2, #48]	; 0x30

    // Configure PA7, PA8, and PA9 as output (LEDs)
    GPIOA->MODER |= GPIO_MODER_MODE7_0 | GPIO_MODER_MODE8_0 | GPIO_MODER_MODE9_0;
 8000214:	4b2b      	ldr	r3, [pc, #172]	; (80002c4 <main+0xc0>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a2a      	ldr	r2, [pc, #168]	; (80002c4 <main+0xc0>)
 800021a:	f443 23a8 	orr.w	r3, r3, #344064	; 0x54000
 800021e:	6013      	str	r3, [r2, #0]

    // Configure PB8, PB9, and PC9 as input (Switches)
    GPIOB->MODER &= ~(GPIO_MODER_MODE8_Msk | GPIO_MODER_MODE9_Msk);
 8000220:	4b29      	ldr	r3, [pc, #164]	; (80002c8 <main+0xc4>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a28      	ldr	r2, [pc, #160]	; (80002c8 <main+0xc4>)
 8000226:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800022a:	6013      	str	r3, [r2, #0]
    GPIOC->MODER &= ~GPIO_MODER_MODE9_Msk;
 800022c:	4b27      	ldr	r3, [pc, #156]	; (80002cc <main+0xc8>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a26      	ldr	r2, [pc, #152]	; (80002cc <main+0xc8>)
 8000232:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000236:	6013      	str	r3, [r2, #0]

    while(1)
    {
        // Check if the 1st switch (PB8) is pressed
        if(GPIOB->IDR & GPIO_IDR_ID8)
 8000238:	4b23      	ldr	r3, [pc, #140]	; (80002c8 <main+0xc4>)
 800023a:	691b      	ldr	r3, [r3, #16]
 800023c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000240:	2b00      	cmp	r3, #0
 8000242:	d006      	beq.n	8000252 <main+0x4e>
        {
            // Turn on LED 1 (PA7)
            GPIOA->BSRR |= GPIO_BSRR_BS7;
 8000244:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <main+0xc0>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	4a1e      	ldr	r2, [pc, #120]	; (80002c4 <main+0xc0>)
 800024a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800024e:	6193      	str	r3, [r2, #24]
 8000250:	e031      	b.n	80002b6 <main+0xb2>
        }
        // Check if the 2nd switch (PB9) is pressed
        else if(GPIOB->IDR & GPIO_IDR_ID9)
 8000252:	4b1d      	ldr	r3, [pc, #116]	; (80002c8 <main+0xc4>)
 8000254:	691b      	ldr	r3, [r3, #16]
 8000256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800025a:	2b00      	cmp	r3, #0
 800025c:	d00c      	beq.n	8000278 <main+0x74>
        {
            // Turn on LED 1 (PA7)
            GPIOA->BSRR |= GPIO_BSRR_BS7;
 800025e:	4b19      	ldr	r3, [pc, #100]	; (80002c4 <main+0xc0>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4a18      	ldr	r2, [pc, #96]	; (80002c4 <main+0xc0>)
 8000264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000268:	6193      	str	r3, [r2, #24]
            // Turn on LED 2 (PA8)
            GPIOA->BSRR |= GPIO_BSRR_BS8;
 800026a:	4b16      	ldr	r3, [pc, #88]	; (80002c4 <main+0xc0>)
 800026c:	699b      	ldr	r3, [r3, #24]
 800026e:	4a15      	ldr	r2, [pc, #84]	; (80002c4 <main+0xc0>)
 8000270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000274:	6193      	str	r3, [r2, #24]
 8000276:	e01e      	b.n	80002b6 <main+0xb2>
        }
        // Check if the 3rd switch (PC9) is pressed
        else if(GPIOC->IDR & GPIO_IDR_ID9)
 8000278:	4b14      	ldr	r3, [pc, #80]	; (80002cc <main+0xc8>)
 800027a:	691b      	ldr	r3, [r3, #16]
 800027c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000280:	2b00      	cmp	r3, #0
 8000282:	d012      	beq.n	80002aa <main+0xa6>
        {
            // Turn on LED 1 (PA7)
            GPIOA->BSRR |= GPIO_BSRR_BS7;
 8000284:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <main+0xc0>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	4a0e      	ldr	r2, [pc, #56]	; (80002c4 <main+0xc0>)
 800028a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800028e:	6193      	str	r3, [r2, #24]
            // Turn on LED 2 (PA8)
            GPIOA->BSRR |= GPIO_BSRR_BS8;
 8000290:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <main+0xc0>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	4a0b      	ldr	r2, [pc, #44]	; (80002c4 <main+0xc0>)
 8000296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800029a:	6193      	str	r3, [r2, #24]
            // Turn on LED 3 (PA9)
            GPIOA->BSRR |= GPIO_BSRR_BS9;
 800029c:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <main+0xc0>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	4a08      	ldr	r2, [pc, #32]	; (80002c4 <main+0xc0>)
 80002a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002a6:	6193      	str	r3, [r2, #24]
 80002a8:	e005      	b.n	80002b6 <main+0xb2>
        }
        else
        {
            // If no switch is pressed, turn off all LEDs
            GPIOA->BSRR |= (GPIO_BSRR_BR7 | GPIO_BSRR_BR8 | GPIO_BSRR_BR9);
 80002aa:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <main+0xc0>)
 80002ac:	699b      	ldr	r3, [r3, #24]
 80002ae:	4a05      	ldr	r2, [pc, #20]	; (80002c4 <main+0xc0>)
 80002b0:	f043 7360 	orr.w	r3, r3, #58720256	; 0x3800000
 80002b4:	6193      	str	r3, [r2, #24]
        }

        // Add a small delay for debouncing
        delay(100);
 80002b6:	2064      	movs	r0, #100	; 0x64
 80002b8:	f000 f80a 	bl	80002d0 <delay>
        if(GPIOB->IDR & GPIO_IDR_ID8)
 80002bc:	e7bc      	b.n	8000238 <main+0x34>
 80002be:	bf00      	nop
 80002c0:	40023800 	.word	0x40023800
 80002c4:	40020000 	.word	0x40020000
 80002c8:	40020400 	.word	0x40020400
 80002cc:	40020800 	.word	0x40020800

080002d0 <delay>:
    return 0;
}

// Simple delay function
void delay(int milliseconds)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b085      	sub	sp, #20
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < milliseconds * 1000; i++);
 80002d8:	2300      	movs	r3, #0
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	e002      	b.n	80002e4 <delay+0x14>
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	3301      	adds	r3, #1
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002ea:	fb02 f303 	mul.w	r3, r2, r3
 80002ee:	68fa      	ldr	r2, [r7, #12]
 80002f0:	429a      	cmp	r2, r3
 80002f2:	dbf4      	blt.n	80002de <delay+0xe>
}
 80002f4:	bf00      	nop
 80002f6:	bf00      	nop
 80002f8:	3714      	adds	r7, #20
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr

08000302 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000302:	b480      	push	{r7}
 8000304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000306:	e7fe      	b.n	8000306 <NMI_Handler+0x4>

08000308 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800030c:	e7fe      	b.n	800030c <HardFault_Handler+0x4>

0800030e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800030e:	b480      	push	{r7}
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000312:	e7fe      	b.n	8000312 <MemManage_Handler+0x4>

08000314 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000318:	e7fe      	b.n	8000318 <BusFault_Handler+0x4>

0800031a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800031a:	b480      	push	{r7}
 800031c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800031e:	e7fe      	b.n	800031e <UsageFault_Handler+0x4>

08000320 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr

0800032e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800032e:	b480      	push	{r7}
 8000330:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000332:	bf00      	nop
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr

0800033c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr

0800034a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800034a:	b580      	push	{r7, lr}
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800034e:	f000 f83f 	bl	80003d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
	...

08000358 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <SystemInit+0x20>)
 800035e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000362:	4a05      	ldr	r2, [pc, #20]	; (8000378 <SystemInit+0x20>)
 8000364:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000368:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	e000ed00 	.word	0xe000ed00

0800037c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800037c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000380:	f7ff ffea 	bl	8000358 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000384:	480c      	ldr	r0, [pc, #48]	; (80003b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000386:	490d      	ldr	r1, [pc, #52]	; (80003bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000388:	4a0d      	ldr	r2, [pc, #52]	; (80003c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800038c:	e002      	b.n	8000394 <LoopCopyDataInit>

0800038e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000392:	3304      	adds	r3, #4

08000394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000398:	d3f9      	bcc.n	800038e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039a:	4a0a      	ldr	r2, [pc, #40]	; (80003c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800039c:	4c0a      	ldr	r4, [pc, #40]	; (80003c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a0:	e001      	b.n	80003a6 <LoopFillZerobss>

080003a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a4:	3204      	adds	r2, #4

080003a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a8:	d3fb      	bcc.n	80003a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80003aa:	f000 f825 	bl	80003f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003ae:	f7ff ff29 	bl	8000204 <main>
  bx  lr    
 80003b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003bc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003c0:	08000460 	.word	0x08000460
  ldr r2, =_sbss
 80003c4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003c8:	20000024 	.word	0x20000024

080003cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003cc:	e7fe      	b.n	80003cc <ADC_IRQHandler>
	...

080003d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <HAL_IncTick+0x20>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	461a      	mov	r2, r3
 80003da:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <HAL_IncTick+0x24>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4413      	add	r3, r2
 80003e0:	4a04      	ldr	r2, [pc, #16]	; (80003f4 <HAL_IncTick+0x24>)
 80003e2:	6013      	str	r3, [r2, #0]
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	20000000 	.word	0x20000000
 80003f4:	20000020 	.word	0x20000020

080003f8 <__libc_init_array>:
 80003f8:	b570      	push	{r4, r5, r6, lr}
 80003fa:	4d0d      	ldr	r5, [pc, #52]	; (8000430 <__libc_init_array+0x38>)
 80003fc:	4c0d      	ldr	r4, [pc, #52]	; (8000434 <__libc_init_array+0x3c>)
 80003fe:	1b64      	subs	r4, r4, r5
 8000400:	10a4      	asrs	r4, r4, #2
 8000402:	2600      	movs	r6, #0
 8000404:	42a6      	cmp	r6, r4
 8000406:	d109      	bne.n	800041c <__libc_init_array+0x24>
 8000408:	4d0b      	ldr	r5, [pc, #44]	; (8000438 <__libc_init_array+0x40>)
 800040a:	4c0c      	ldr	r4, [pc, #48]	; (800043c <__libc_init_array+0x44>)
 800040c:	f000 f818 	bl	8000440 <_init>
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	10a4      	asrs	r4, r4, #2
 8000414:	2600      	movs	r6, #0
 8000416:	42a6      	cmp	r6, r4
 8000418:	d105      	bne.n	8000426 <__libc_init_array+0x2e>
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000420:	4798      	blx	r3
 8000422:	3601      	adds	r6, #1
 8000424:	e7ee      	b.n	8000404 <__libc_init_array+0xc>
 8000426:	f855 3b04 	ldr.w	r3, [r5], #4
 800042a:	4798      	blx	r3
 800042c:	3601      	adds	r6, #1
 800042e:	e7f2      	b.n	8000416 <__libc_init_array+0x1e>
 8000430:	08000458 	.word	0x08000458
 8000434:	08000458 	.word	0x08000458
 8000438:	08000458 	.word	0x08000458
 800043c:	0800045c 	.word	0x0800045c

08000440 <_init>:
 8000440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000442:	bf00      	nop
 8000444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000446:	bc08      	pop	{r3}
 8000448:	469e      	mov	lr, r3
 800044a:	4770      	bx	lr

0800044c <_fini>:
 800044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044e:	bf00      	nop
 8000450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000452:	bc08      	pop	{r3}
 8000454:	469e      	mov	lr, r3
 8000456:	4770      	bx	lr
