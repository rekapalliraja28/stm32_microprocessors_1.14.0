
LED1_switch1_register_08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001274  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08001444  08001444  00011444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800149c  0800149c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800149c  0800149c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800149c  0800149c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800149c  0800149c  0001149c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080014a0  080014a0  000114a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080014a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000060  08001504  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08001504  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001ba8  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000768  00000000  00000000  00021c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000290  00000000  00000000  000223e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001cb  00000000  00000000  00022678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000210af  00000000  00000000  00022843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002c82  00000000  00000000  000438f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8986  00000000  00000000  00046574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000fdc  00000000  00000000  0010eefc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0010fed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800142c 	.word	0x0800142c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	0800142c 	.word	0x0800142c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:
#define DEBOUNCE_DELAY 100

void delay(int milliseconds);

int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
    //int switchState = 0; // Variable to store the state of the switch press
    int numPresses = 0; // Variable to store the number of times the switch is pressed
 80002b6:	2300      	movs	r3, #0
 80002b8:	607b      	str	r3, [r7, #4]

    // Enable clock for GPIOA and GPIOC
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 80002ba:	4b21      	ldr	r3, [pc, #132]	; (8000340 <main+0x90>)
 80002bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002be:	4a20      	ldr	r2, [pc, #128]	; (8000340 <main+0x90>)
 80002c0:	f043 0305 	orr.w	r3, r3, #5
 80002c4:	6313      	str	r3, [r2, #48]	; 0x30

    // Configure PA5 as output (LED) and PC13 as input (Switch)
    GPIOA->MODER |= GPIO_MODER_MODE5_0;  // Set PA5 as output
 80002c6:	4b1f      	ldr	r3, [pc, #124]	; (8000344 <main+0x94>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4a1e      	ldr	r2, [pc, #120]	; (8000344 <main+0x94>)
 80002cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d0:	6013      	str	r3, [r2, #0]
    GPIOC->MODER &= ~(GPIO_MODER_MODE13_Msk);  // Clear the bits for PC13
 80002d2:	4b1d      	ldr	r3, [pc, #116]	; (8000348 <main+0x98>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4a1c      	ldr	r2, [pc, #112]	; (8000348 <main+0x98>)
 80002d8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80002dc:	6013      	str	r3, [r2, #0]

    while(1)
    {
        if(GPIOC->IDR & GPIO_IDR_ID13)
 80002de:	4b1a      	ldr	r3, [pc, #104]	; (8000348 <main+0x98>)
 80002e0:	691b      	ldr	r3, [r3, #16]
 80002e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d0f9      	beq.n	80002de <main+0x2e>
        {
            delay(DEBOUNCE_DELAY); // Debounce delay
 80002ea:	2064      	movs	r0, #100	; 0x64
 80002ec:	f000 f830 	bl	8000350 <delay>

            if(GPIOC->IDR & GPIO_IDR_ID13) // Check again if the switch is still pressed
 80002f0:	4b15      	ldr	r3, [pc, #84]	; (8000348 <main+0x98>)
 80002f2:	691b      	ldr	r3, [r3, #16]
 80002f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d019      	beq.n	8000330 <main+0x80>
            {
                numPresses++; // Increment number of presses
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	3301      	adds	r3, #1
 8000300:	607b      	str	r3, [r7, #4]

                // Toggle LED based on the number of presses
                for (int i = 0; i < numPresses; i++) {
 8000302:	2300      	movs	r3, #0
 8000304:	603b      	str	r3, [r7, #0]
 8000306:	e00b      	b.n	8000320 <main+0x70>
                    GPIOA->ODR ^= GPIO_ODR_OD5; // Toggle LED
 8000308:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <main+0x94>)
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	4a0d      	ldr	r2, [pc, #52]	; (8000344 <main+0x94>)
 800030e:	f083 0320 	eor.w	r3, r3, #32
 8000312:	6153      	str	r3, [r2, #20]
                    delay(DEBOUNCE_DELAY);
 8000314:	2064      	movs	r0, #100	; 0x64
 8000316:	f000 f81b 	bl	8000350 <delay>
                for (int i = 0; i < numPresses; i++) {
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	3301      	adds	r3, #1
 800031e:	603b      	str	r3, [r7, #0]
 8000320:	683a      	ldr	r2, [r7, #0]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	429a      	cmp	r2, r3
 8000326:	dbef      	blt.n	8000308 <main+0x58>
                }

                // Print the number of times switch pressed
                printf("Number of times switch pressed: %d\n", numPresses);
 8000328:	6879      	ldr	r1, [r7, #4]
 800032a:	4808      	ldr	r0, [pc, #32]	; (800034c <main+0x9c>)
 800032c:	f000 fa08 	bl	8000740 <iprintf>
            }

            while(GPIOC->IDR & GPIO_IDR_ID13); // Wait until the switch is released
 8000330:	bf00      	nop
 8000332:	4b05      	ldr	r3, [pc, #20]	; (8000348 <main+0x98>)
 8000334:	691b      	ldr	r3, [r3, #16]
 8000336:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800033a:	2b00      	cmp	r3, #0
 800033c:	d1f9      	bne.n	8000332 <main+0x82>
        if(GPIOC->IDR & GPIO_IDR_ID13)
 800033e:	e7ce      	b.n	80002de <main+0x2e>
 8000340:	40023800 	.word	0x40023800
 8000344:	40020000 	.word	0x40020000
 8000348:	40020800 	.word	0x40020800
 800034c:	08001444 	.word	0x08001444

08000350 <delay>:
    return 0;
}

// Simple delay function
void delay(int milliseconds)
{
 8000350:	b480      	push	{r7}
 8000352:	b085      	sub	sp, #20
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < milliseconds * 1000; i++);
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	e002      	b.n	8000364 <delay+0x14>
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	3301      	adds	r3, #1
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800036a:	fb02 f303 	mul.w	r3, r2, r3
 800036e:	68fa      	ldr	r2, [r7, #12]
 8000370:	429a      	cmp	r2, r3
 8000372:	dbf4      	blt.n	800035e <delay+0xe>
}
 8000374:	bf00      	nop
 8000376:	bf00      	nop
 8000378:	3714      	adds	r7, #20
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr

08000382 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000382:	b480      	push	{r7}
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000386:	e7fe      	b.n	8000386 <NMI_Handler+0x4>

08000388 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800038c:	e7fe      	b.n	800038c <HardFault_Handler+0x4>

0800038e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000392:	e7fe      	b.n	8000392 <MemManage_Handler+0x4>

08000394 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000398:	e7fe      	b.n	8000398 <BusFault_Handler+0x4>

0800039a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800039a:	b480      	push	{r7}
 800039c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800039e:	e7fe      	b.n	800039e <UsageFault_Handler+0x4>

080003a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr

080003ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003ae:	b480      	push	{r7}
 80003b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003b2:	bf00      	nop
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr

080003ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003ca:	b580      	push	{r7, lr}
 80003cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003ce:	f000 f8e1 	bl	8000594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	b086      	sub	sp, #24
 80003da:	af00      	add	r7, sp, #0
 80003dc:	60f8      	str	r0, [r7, #12]
 80003de:	60b9      	str	r1, [r7, #8]
 80003e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e2:	2300      	movs	r3, #0
 80003e4:	617b      	str	r3, [r7, #20]
 80003e6:	e00a      	b.n	80003fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003e8:	f3af 8000 	nop.w
 80003ec:	4601      	mov	r1, r0
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	1c5a      	adds	r2, r3, #1
 80003f2:	60ba      	str	r2, [r7, #8]
 80003f4:	b2ca      	uxtb	r2, r1
 80003f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	3301      	adds	r3, #1
 80003fc:	617b      	str	r3, [r7, #20]
 80003fe:	697a      	ldr	r2, [r7, #20]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	429a      	cmp	r2, r3
 8000404:	dbf0      	blt.n	80003e8 <_read+0x12>
  }

  return len;
 8000406:	687b      	ldr	r3, [r7, #4]
}
 8000408:	4618      	mov	r0, r3
 800040a:	3718      	adds	r7, #24
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b086      	sub	sp, #24
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800041c:	2300      	movs	r3, #0
 800041e:	617b      	str	r3, [r7, #20]
 8000420:	e009      	b.n	8000436 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	1c5a      	adds	r2, r3, #1
 8000426:	60ba      	str	r2, [r7, #8]
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	4618      	mov	r0, r3
 800042c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	3301      	adds	r3, #1
 8000434:	617b      	str	r3, [r7, #20]
 8000436:	697a      	ldr	r2, [r7, #20]
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	429a      	cmp	r2, r3
 800043c:	dbf1      	blt.n	8000422 <_write+0x12>
  }
  return len;
 800043e:	687b      	ldr	r3, [r7, #4]
}
 8000440:	4618      	mov	r0, r3
 8000442:	3718      	adds	r7, #24
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <_close>:

int _close(int file)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000454:	4618      	mov	r0, r3
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000470:	605a      	str	r2, [r3, #4]
  return 0;
 8000472:	2300      	movs	r3, #0
}
 8000474:	4618      	mov	r0, r3
 8000476:	370c      	adds	r7, #12
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr

08000480 <_isatty>:

int _isatty(int file)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000488:	2301      	movs	r3, #1
}
 800048a:	4618      	mov	r0, r3
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr

08000496 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000496:	b480      	push	{r7}
 8000498:	b085      	sub	sp, #20
 800049a:	af00      	add	r7, sp, #0
 800049c:	60f8      	str	r0, [r7, #12]
 800049e:	60b9      	str	r1, [r7, #8]
 80004a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004a2:	2300      	movs	r3, #0
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3714      	adds	r7, #20
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004b8:	4a14      	ldr	r2, [pc, #80]	; (800050c <_sbrk+0x5c>)
 80004ba:	4b15      	ldr	r3, [pc, #84]	; (8000510 <_sbrk+0x60>)
 80004bc:	1ad3      	subs	r3, r2, r3
 80004be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004c4:	4b13      	ldr	r3, [pc, #76]	; (8000514 <_sbrk+0x64>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d102      	bne.n	80004d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004cc:	4b11      	ldr	r3, [pc, #68]	; (8000514 <_sbrk+0x64>)
 80004ce:	4a12      	ldr	r2, [pc, #72]	; (8000518 <_sbrk+0x68>)
 80004d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004d2:	4b10      	ldr	r3, [pc, #64]	; (8000514 <_sbrk+0x64>)
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4413      	add	r3, r2
 80004da:	693a      	ldr	r2, [r7, #16]
 80004dc:	429a      	cmp	r2, r3
 80004de:	d207      	bcs.n	80004f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004e0:	f000 f9d2 	bl	8000888 <__errno>
 80004e4:	4603      	mov	r3, r0
 80004e6:	220c      	movs	r2, #12
 80004e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004ee:	e009      	b.n	8000504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <_sbrk+0x64>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004f6:	4b07      	ldr	r3, [pc, #28]	; (8000514 <_sbrk+0x64>)
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4413      	add	r3, r2
 80004fe:	4a05      	ldr	r2, [pc, #20]	; (8000514 <_sbrk+0x64>)
 8000500:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000502:	68fb      	ldr	r3, [r7, #12]
}
 8000504:	4618      	mov	r0, r3
 8000506:	3718      	adds	r7, #24
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20020000 	.word	0x20020000
 8000510:	00000400 	.word	0x00000400
 8000514:	2000007c 	.word	0x2000007c
 8000518:	200001d0 	.word	0x200001d0

0800051c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <SystemInit+0x20>)
 8000522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000526:	4a05      	ldr	r2, [pc, #20]	; (800053c <SystemInit+0x20>)
 8000528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800052c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	e000ed00 	.word	0xe000ed00

08000540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000578 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000544:	f7ff ffea 	bl	800051c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000548:	480c      	ldr	r0, [pc, #48]	; (800057c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800054a:	490d      	ldr	r1, [pc, #52]	; (8000580 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800054c:	4a0d      	ldr	r2, [pc, #52]	; (8000584 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000550:	e002      	b.n	8000558 <LoopCopyDataInit>

08000552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000556:	3304      	adds	r3, #4

08000558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800055a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800055c:	d3f9      	bcc.n	8000552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800055e:	4a0a      	ldr	r2, [pc, #40]	; (8000588 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000560:	4c0a      	ldr	r4, [pc, #40]	; (800058c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000564:	e001      	b.n	800056a <LoopFillZerobss>

08000566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000568:	3204      	adds	r2, #4

0800056a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800056a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800056c:	d3fb      	bcc.n	8000566 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800056e:	f000 f991 	bl	8000894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000572:	f7ff fe9d 	bl	80002b0 <main>
  bx  lr    
 8000576:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000578:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800057c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000580:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000584:	080014a4 	.word	0x080014a4
  ldr r2, =_sbss
 8000588:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800058c:	200001d0 	.word	0x200001d0

08000590 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000590:	e7fe      	b.n	8000590 <ADC_IRQHandler>
	...

08000594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <HAL_IncTick+0x20>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <HAL_IncTick+0x24>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4413      	add	r3, r2
 80005a4:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <HAL_IncTick+0x24>)
 80005a6:	6013      	str	r3, [r2, #0]
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000000 	.word	0x20000000
 80005b8:	20000080 	.word	0x20000080

080005bc <std>:
 80005bc:	2300      	movs	r3, #0
 80005be:	b510      	push	{r4, lr}
 80005c0:	4604      	mov	r4, r0
 80005c2:	e9c0 3300 	strd	r3, r3, [r0]
 80005c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80005ca:	6083      	str	r3, [r0, #8]
 80005cc:	8181      	strh	r1, [r0, #12]
 80005ce:	6643      	str	r3, [r0, #100]	; 0x64
 80005d0:	81c2      	strh	r2, [r0, #14]
 80005d2:	6183      	str	r3, [r0, #24]
 80005d4:	4619      	mov	r1, r3
 80005d6:	2208      	movs	r2, #8
 80005d8:	305c      	adds	r0, #92	; 0x5c
 80005da:	f000 f906 	bl	80007ea <memset>
 80005de:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <std+0x58>)
 80005e0:	6263      	str	r3, [r4, #36]	; 0x24
 80005e2:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <std+0x5c>)
 80005e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80005e6:	4b0d      	ldr	r3, [pc, #52]	; (800061c <std+0x60>)
 80005e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80005ea:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <std+0x64>)
 80005ec:	6323      	str	r3, [r4, #48]	; 0x30
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <std+0x68>)
 80005f0:	6224      	str	r4, [r4, #32]
 80005f2:	429c      	cmp	r4, r3
 80005f4:	d006      	beq.n	8000604 <std+0x48>
 80005f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80005fa:	4294      	cmp	r4, r2
 80005fc:	d002      	beq.n	8000604 <std+0x48>
 80005fe:	33d0      	adds	r3, #208	; 0xd0
 8000600:	429c      	cmp	r4, r3
 8000602:	d105      	bne.n	8000610 <std+0x54>
 8000604:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800060c:	f000 b966 	b.w	80008dc <__retarget_lock_init_recursive>
 8000610:	bd10      	pop	{r4, pc}
 8000612:	bf00      	nop
 8000614:	08000765 	.word	0x08000765
 8000618:	08000787 	.word	0x08000787
 800061c:	080007bf 	.word	0x080007bf
 8000620:	080007e3 	.word	0x080007e3
 8000624:	20000084 	.word	0x20000084

08000628 <stdio_exit_handler>:
 8000628:	4a02      	ldr	r2, [pc, #8]	; (8000634 <stdio_exit_handler+0xc>)
 800062a:	4903      	ldr	r1, [pc, #12]	; (8000638 <stdio_exit_handler+0x10>)
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <stdio_exit_handler+0x14>)
 800062e:	f000 b869 	b.w	8000704 <_fwalk_sglue>
 8000632:	bf00      	nop
 8000634:	20000004 	.word	0x20000004
 8000638:	08001189 	.word	0x08001189
 800063c:	20000010 	.word	0x20000010

08000640 <cleanup_stdio>:
 8000640:	6841      	ldr	r1, [r0, #4]
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <cleanup_stdio+0x34>)
 8000644:	4299      	cmp	r1, r3
 8000646:	b510      	push	{r4, lr}
 8000648:	4604      	mov	r4, r0
 800064a:	d001      	beq.n	8000650 <cleanup_stdio+0x10>
 800064c:	f000 fd9c 	bl	8001188 <_fflush_r>
 8000650:	68a1      	ldr	r1, [r4, #8]
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <cleanup_stdio+0x38>)
 8000654:	4299      	cmp	r1, r3
 8000656:	d002      	beq.n	800065e <cleanup_stdio+0x1e>
 8000658:	4620      	mov	r0, r4
 800065a:	f000 fd95 	bl	8001188 <_fflush_r>
 800065e:	68e1      	ldr	r1, [r4, #12]
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <cleanup_stdio+0x3c>)
 8000662:	4299      	cmp	r1, r3
 8000664:	d004      	beq.n	8000670 <cleanup_stdio+0x30>
 8000666:	4620      	mov	r0, r4
 8000668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800066c:	f000 bd8c 	b.w	8001188 <_fflush_r>
 8000670:	bd10      	pop	{r4, pc}
 8000672:	bf00      	nop
 8000674:	20000084 	.word	0x20000084
 8000678:	200000ec 	.word	0x200000ec
 800067c:	20000154 	.word	0x20000154

08000680 <global_stdio_init.part.0>:
 8000680:	b510      	push	{r4, lr}
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <global_stdio_init.part.0+0x30>)
 8000684:	4c0b      	ldr	r4, [pc, #44]	; (80006b4 <global_stdio_init.part.0+0x34>)
 8000686:	4a0c      	ldr	r2, [pc, #48]	; (80006b8 <global_stdio_init.part.0+0x38>)
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	4620      	mov	r0, r4
 800068c:	2200      	movs	r2, #0
 800068e:	2104      	movs	r1, #4
 8000690:	f7ff ff94 	bl	80005bc <std>
 8000694:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000698:	2201      	movs	r2, #1
 800069a:	2109      	movs	r1, #9
 800069c:	f7ff ff8e 	bl	80005bc <std>
 80006a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80006a4:	2202      	movs	r2, #2
 80006a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006aa:	2112      	movs	r1, #18
 80006ac:	f7ff bf86 	b.w	80005bc <std>
 80006b0:	200001bc 	.word	0x200001bc
 80006b4:	20000084 	.word	0x20000084
 80006b8:	08000629 	.word	0x08000629

080006bc <__sfp_lock_acquire>:
 80006bc:	4801      	ldr	r0, [pc, #4]	; (80006c4 <__sfp_lock_acquire+0x8>)
 80006be:	f000 b90e 	b.w	80008de <__retarget_lock_acquire_recursive>
 80006c2:	bf00      	nop
 80006c4:	200001c5 	.word	0x200001c5

080006c8 <__sfp_lock_release>:
 80006c8:	4801      	ldr	r0, [pc, #4]	; (80006d0 <__sfp_lock_release+0x8>)
 80006ca:	f000 b909 	b.w	80008e0 <__retarget_lock_release_recursive>
 80006ce:	bf00      	nop
 80006d0:	200001c5 	.word	0x200001c5

080006d4 <__sinit>:
 80006d4:	b510      	push	{r4, lr}
 80006d6:	4604      	mov	r4, r0
 80006d8:	f7ff fff0 	bl	80006bc <__sfp_lock_acquire>
 80006dc:	6a23      	ldr	r3, [r4, #32]
 80006de:	b11b      	cbz	r3, 80006e8 <__sinit+0x14>
 80006e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006e4:	f7ff bff0 	b.w	80006c8 <__sfp_lock_release>
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <__sinit+0x28>)
 80006ea:	6223      	str	r3, [r4, #32]
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <__sinit+0x2c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1f5      	bne.n	80006e0 <__sinit+0xc>
 80006f4:	f7ff ffc4 	bl	8000680 <global_stdio_init.part.0>
 80006f8:	e7f2      	b.n	80006e0 <__sinit+0xc>
 80006fa:	bf00      	nop
 80006fc:	08000641 	.word	0x08000641
 8000700:	200001bc 	.word	0x200001bc

08000704 <_fwalk_sglue>:
 8000704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000708:	4607      	mov	r7, r0
 800070a:	4688      	mov	r8, r1
 800070c:	4614      	mov	r4, r2
 800070e:	2600      	movs	r6, #0
 8000710:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000714:	f1b9 0901 	subs.w	r9, r9, #1
 8000718:	d505      	bpl.n	8000726 <_fwalk_sglue+0x22>
 800071a:	6824      	ldr	r4, [r4, #0]
 800071c:	2c00      	cmp	r4, #0
 800071e:	d1f7      	bne.n	8000710 <_fwalk_sglue+0xc>
 8000720:	4630      	mov	r0, r6
 8000722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000726:	89ab      	ldrh	r3, [r5, #12]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d907      	bls.n	800073c <_fwalk_sglue+0x38>
 800072c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000730:	3301      	adds	r3, #1
 8000732:	d003      	beq.n	800073c <_fwalk_sglue+0x38>
 8000734:	4629      	mov	r1, r5
 8000736:	4638      	mov	r0, r7
 8000738:	47c0      	blx	r8
 800073a:	4306      	orrs	r6, r0
 800073c:	3568      	adds	r5, #104	; 0x68
 800073e:	e7e9      	b.n	8000714 <_fwalk_sglue+0x10>

08000740 <iprintf>:
 8000740:	b40f      	push	{r0, r1, r2, r3}
 8000742:	b507      	push	{r0, r1, r2, lr}
 8000744:	4906      	ldr	r1, [pc, #24]	; (8000760 <iprintf+0x20>)
 8000746:	ab04      	add	r3, sp, #16
 8000748:	6808      	ldr	r0, [r1, #0]
 800074a:	f853 2b04 	ldr.w	r2, [r3], #4
 800074e:	6881      	ldr	r1, [r0, #8]
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	f000 f9e9 	bl	8000b28 <_vfiprintf_r>
 8000756:	b003      	add	sp, #12
 8000758:	f85d eb04 	ldr.w	lr, [sp], #4
 800075c:	b004      	add	sp, #16
 800075e:	4770      	bx	lr
 8000760:	2000005c 	.word	0x2000005c

08000764 <__sread>:
 8000764:	b510      	push	{r4, lr}
 8000766:	460c      	mov	r4, r1
 8000768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800076c:	f000 f868 	bl	8000840 <_read_r>
 8000770:	2800      	cmp	r0, #0
 8000772:	bfab      	itete	ge
 8000774:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000776:	89a3      	ldrhlt	r3, [r4, #12]
 8000778:	181b      	addge	r3, r3, r0
 800077a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800077e:	bfac      	ite	ge
 8000780:	6563      	strge	r3, [r4, #84]	; 0x54
 8000782:	81a3      	strhlt	r3, [r4, #12]
 8000784:	bd10      	pop	{r4, pc}

08000786 <__swrite>:
 8000786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800078a:	461f      	mov	r7, r3
 800078c:	898b      	ldrh	r3, [r1, #12]
 800078e:	05db      	lsls	r3, r3, #23
 8000790:	4605      	mov	r5, r0
 8000792:	460c      	mov	r4, r1
 8000794:	4616      	mov	r6, r2
 8000796:	d505      	bpl.n	80007a4 <__swrite+0x1e>
 8000798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800079c:	2302      	movs	r3, #2
 800079e:	2200      	movs	r2, #0
 80007a0:	f000 f83c 	bl	800081c <_lseek_r>
 80007a4:	89a3      	ldrh	r3, [r4, #12]
 80007a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80007aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007ae:	81a3      	strh	r3, [r4, #12]
 80007b0:	4632      	mov	r2, r6
 80007b2:	463b      	mov	r3, r7
 80007b4:	4628      	mov	r0, r5
 80007b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80007ba:	f000 b853 	b.w	8000864 <_write_r>

080007be <__sseek>:
 80007be:	b510      	push	{r4, lr}
 80007c0:	460c      	mov	r4, r1
 80007c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007c6:	f000 f829 	bl	800081c <_lseek_r>
 80007ca:	1c43      	adds	r3, r0, #1
 80007cc:	89a3      	ldrh	r3, [r4, #12]
 80007ce:	bf15      	itete	ne
 80007d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80007d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80007d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80007da:	81a3      	strheq	r3, [r4, #12]
 80007dc:	bf18      	it	ne
 80007de:	81a3      	strhne	r3, [r4, #12]
 80007e0:	bd10      	pop	{r4, pc}

080007e2 <__sclose>:
 80007e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007e6:	f000 b809 	b.w	80007fc <_close_r>

080007ea <memset>:
 80007ea:	4402      	add	r2, r0
 80007ec:	4603      	mov	r3, r0
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d100      	bne.n	80007f4 <memset+0xa>
 80007f2:	4770      	bx	lr
 80007f4:	f803 1b01 	strb.w	r1, [r3], #1
 80007f8:	e7f9      	b.n	80007ee <memset+0x4>
	...

080007fc <_close_r>:
 80007fc:	b538      	push	{r3, r4, r5, lr}
 80007fe:	4d06      	ldr	r5, [pc, #24]	; (8000818 <_close_r+0x1c>)
 8000800:	2300      	movs	r3, #0
 8000802:	4604      	mov	r4, r0
 8000804:	4608      	mov	r0, r1
 8000806:	602b      	str	r3, [r5, #0]
 8000808:	f7ff fe1e 	bl	8000448 <_close>
 800080c:	1c43      	adds	r3, r0, #1
 800080e:	d102      	bne.n	8000816 <_close_r+0x1a>
 8000810:	682b      	ldr	r3, [r5, #0]
 8000812:	b103      	cbz	r3, 8000816 <_close_r+0x1a>
 8000814:	6023      	str	r3, [r4, #0]
 8000816:	bd38      	pop	{r3, r4, r5, pc}
 8000818:	200001c0 	.word	0x200001c0

0800081c <_lseek_r>:
 800081c:	b538      	push	{r3, r4, r5, lr}
 800081e:	4d07      	ldr	r5, [pc, #28]	; (800083c <_lseek_r+0x20>)
 8000820:	4604      	mov	r4, r0
 8000822:	4608      	mov	r0, r1
 8000824:	4611      	mov	r1, r2
 8000826:	2200      	movs	r2, #0
 8000828:	602a      	str	r2, [r5, #0]
 800082a:	461a      	mov	r2, r3
 800082c:	f7ff fe33 	bl	8000496 <_lseek>
 8000830:	1c43      	adds	r3, r0, #1
 8000832:	d102      	bne.n	800083a <_lseek_r+0x1e>
 8000834:	682b      	ldr	r3, [r5, #0]
 8000836:	b103      	cbz	r3, 800083a <_lseek_r+0x1e>
 8000838:	6023      	str	r3, [r4, #0]
 800083a:	bd38      	pop	{r3, r4, r5, pc}
 800083c:	200001c0 	.word	0x200001c0

08000840 <_read_r>:
 8000840:	b538      	push	{r3, r4, r5, lr}
 8000842:	4d07      	ldr	r5, [pc, #28]	; (8000860 <_read_r+0x20>)
 8000844:	4604      	mov	r4, r0
 8000846:	4608      	mov	r0, r1
 8000848:	4611      	mov	r1, r2
 800084a:	2200      	movs	r2, #0
 800084c:	602a      	str	r2, [r5, #0]
 800084e:	461a      	mov	r2, r3
 8000850:	f7ff fdc1 	bl	80003d6 <_read>
 8000854:	1c43      	adds	r3, r0, #1
 8000856:	d102      	bne.n	800085e <_read_r+0x1e>
 8000858:	682b      	ldr	r3, [r5, #0]
 800085a:	b103      	cbz	r3, 800085e <_read_r+0x1e>
 800085c:	6023      	str	r3, [r4, #0]
 800085e:	bd38      	pop	{r3, r4, r5, pc}
 8000860:	200001c0 	.word	0x200001c0

08000864 <_write_r>:
 8000864:	b538      	push	{r3, r4, r5, lr}
 8000866:	4d07      	ldr	r5, [pc, #28]	; (8000884 <_write_r+0x20>)
 8000868:	4604      	mov	r4, r0
 800086a:	4608      	mov	r0, r1
 800086c:	4611      	mov	r1, r2
 800086e:	2200      	movs	r2, #0
 8000870:	602a      	str	r2, [r5, #0]
 8000872:	461a      	mov	r2, r3
 8000874:	f7ff fdcc 	bl	8000410 <_write>
 8000878:	1c43      	adds	r3, r0, #1
 800087a:	d102      	bne.n	8000882 <_write_r+0x1e>
 800087c:	682b      	ldr	r3, [r5, #0]
 800087e:	b103      	cbz	r3, 8000882 <_write_r+0x1e>
 8000880:	6023      	str	r3, [r4, #0]
 8000882:	bd38      	pop	{r3, r4, r5, pc}
 8000884:	200001c0 	.word	0x200001c0

08000888 <__errno>:
 8000888:	4b01      	ldr	r3, [pc, #4]	; (8000890 <__errno+0x8>)
 800088a:	6818      	ldr	r0, [r3, #0]
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	2000005c 	.word	0x2000005c

08000894 <__libc_init_array>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	4d0d      	ldr	r5, [pc, #52]	; (80008cc <__libc_init_array+0x38>)
 8000898:	4c0d      	ldr	r4, [pc, #52]	; (80008d0 <__libc_init_array+0x3c>)
 800089a:	1b64      	subs	r4, r4, r5
 800089c:	10a4      	asrs	r4, r4, #2
 800089e:	2600      	movs	r6, #0
 80008a0:	42a6      	cmp	r6, r4
 80008a2:	d109      	bne.n	80008b8 <__libc_init_array+0x24>
 80008a4:	4d0b      	ldr	r5, [pc, #44]	; (80008d4 <__libc_init_array+0x40>)
 80008a6:	4c0c      	ldr	r4, [pc, #48]	; (80008d8 <__libc_init_array+0x44>)
 80008a8:	f000 fdc0 	bl	800142c <_init>
 80008ac:	1b64      	subs	r4, r4, r5
 80008ae:	10a4      	asrs	r4, r4, #2
 80008b0:	2600      	movs	r6, #0
 80008b2:	42a6      	cmp	r6, r4
 80008b4:	d105      	bne.n	80008c2 <__libc_init_array+0x2e>
 80008b6:	bd70      	pop	{r4, r5, r6, pc}
 80008b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80008bc:	4798      	blx	r3
 80008be:	3601      	adds	r6, #1
 80008c0:	e7ee      	b.n	80008a0 <__libc_init_array+0xc>
 80008c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80008c6:	4798      	blx	r3
 80008c8:	3601      	adds	r6, #1
 80008ca:	e7f2      	b.n	80008b2 <__libc_init_array+0x1e>
 80008cc:	0800149c 	.word	0x0800149c
 80008d0:	0800149c 	.word	0x0800149c
 80008d4:	0800149c 	.word	0x0800149c
 80008d8:	080014a0 	.word	0x080014a0

080008dc <__retarget_lock_init_recursive>:
 80008dc:	4770      	bx	lr

080008de <__retarget_lock_acquire_recursive>:
 80008de:	4770      	bx	lr

080008e0 <__retarget_lock_release_recursive>:
 80008e0:	4770      	bx	lr
	...

080008e4 <_free_r>:
 80008e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80008e6:	2900      	cmp	r1, #0
 80008e8:	d044      	beq.n	8000974 <_free_r+0x90>
 80008ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80008ee:	9001      	str	r0, [sp, #4]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	f1a1 0404 	sub.w	r4, r1, #4
 80008f6:	bfb8      	it	lt
 80008f8:	18e4      	addlt	r4, r4, r3
 80008fa:	f000 f8df 	bl	8000abc <__malloc_lock>
 80008fe:	4a1e      	ldr	r2, [pc, #120]	; (8000978 <_free_r+0x94>)
 8000900:	9801      	ldr	r0, [sp, #4]
 8000902:	6813      	ldr	r3, [r2, #0]
 8000904:	b933      	cbnz	r3, 8000914 <_free_r+0x30>
 8000906:	6063      	str	r3, [r4, #4]
 8000908:	6014      	str	r4, [r2, #0]
 800090a:	b003      	add	sp, #12
 800090c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000910:	f000 b8da 	b.w	8000ac8 <__malloc_unlock>
 8000914:	42a3      	cmp	r3, r4
 8000916:	d908      	bls.n	800092a <_free_r+0x46>
 8000918:	6825      	ldr	r5, [r4, #0]
 800091a:	1961      	adds	r1, r4, r5
 800091c:	428b      	cmp	r3, r1
 800091e:	bf01      	itttt	eq
 8000920:	6819      	ldreq	r1, [r3, #0]
 8000922:	685b      	ldreq	r3, [r3, #4]
 8000924:	1949      	addeq	r1, r1, r5
 8000926:	6021      	streq	r1, [r4, #0]
 8000928:	e7ed      	b.n	8000906 <_free_r+0x22>
 800092a:	461a      	mov	r2, r3
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	b10b      	cbz	r3, 8000934 <_free_r+0x50>
 8000930:	42a3      	cmp	r3, r4
 8000932:	d9fa      	bls.n	800092a <_free_r+0x46>
 8000934:	6811      	ldr	r1, [r2, #0]
 8000936:	1855      	adds	r5, r2, r1
 8000938:	42a5      	cmp	r5, r4
 800093a:	d10b      	bne.n	8000954 <_free_r+0x70>
 800093c:	6824      	ldr	r4, [r4, #0]
 800093e:	4421      	add	r1, r4
 8000940:	1854      	adds	r4, r2, r1
 8000942:	42a3      	cmp	r3, r4
 8000944:	6011      	str	r1, [r2, #0]
 8000946:	d1e0      	bne.n	800090a <_free_r+0x26>
 8000948:	681c      	ldr	r4, [r3, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	6053      	str	r3, [r2, #4]
 800094e:	440c      	add	r4, r1
 8000950:	6014      	str	r4, [r2, #0]
 8000952:	e7da      	b.n	800090a <_free_r+0x26>
 8000954:	d902      	bls.n	800095c <_free_r+0x78>
 8000956:	230c      	movs	r3, #12
 8000958:	6003      	str	r3, [r0, #0]
 800095a:	e7d6      	b.n	800090a <_free_r+0x26>
 800095c:	6825      	ldr	r5, [r4, #0]
 800095e:	1961      	adds	r1, r4, r5
 8000960:	428b      	cmp	r3, r1
 8000962:	bf04      	itt	eq
 8000964:	6819      	ldreq	r1, [r3, #0]
 8000966:	685b      	ldreq	r3, [r3, #4]
 8000968:	6063      	str	r3, [r4, #4]
 800096a:	bf04      	itt	eq
 800096c:	1949      	addeq	r1, r1, r5
 800096e:	6021      	streq	r1, [r4, #0]
 8000970:	6054      	str	r4, [r2, #4]
 8000972:	e7ca      	b.n	800090a <_free_r+0x26>
 8000974:	b003      	add	sp, #12
 8000976:	bd30      	pop	{r4, r5, pc}
 8000978:	200001c8 	.word	0x200001c8

0800097c <sbrk_aligned>:
 800097c:	b570      	push	{r4, r5, r6, lr}
 800097e:	4e0e      	ldr	r6, [pc, #56]	; (80009b8 <sbrk_aligned+0x3c>)
 8000980:	460c      	mov	r4, r1
 8000982:	6831      	ldr	r1, [r6, #0]
 8000984:	4605      	mov	r5, r0
 8000986:	b911      	cbnz	r1, 800098e <sbrk_aligned+0x12>
 8000988:	f000 fcbc 	bl	8001304 <_sbrk_r>
 800098c:	6030      	str	r0, [r6, #0]
 800098e:	4621      	mov	r1, r4
 8000990:	4628      	mov	r0, r5
 8000992:	f000 fcb7 	bl	8001304 <_sbrk_r>
 8000996:	1c43      	adds	r3, r0, #1
 8000998:	d00a      	beq.n	80009b0 <sbrk_aligned+0x34>
 800099a:	1cc4      	adds	r4, r0, #3
 800099c:	f024 0403 	bic.w	r4, r4, #3
 80009a0:	42a0      	cmp	r0, r4
 80009a2:	d007      	beq.n	80009b4 <sbrk_aligned+0x38>
 80009a4:	1a21      	subs	r1, r4, r0
 80009a6:	4628      	mov	r0, r5
 80009a8:	f000 fcac 	bl	8001304 <_sbrk_r>
 80009ac:	3001      	adds	r0, #1
 80009ae:	d101      	bne.n	80009b4 <sbrk_aligned+0x38>
 80009b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80009b4:	4620      	mov	r0, r4
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	200001cc 	.word	0x200001cc

080009bc <_malloc_r>:
 80009bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009c0:	1ccd      	adds	r5, r1, #3
 80009c2:	f025 0503 	bic.w	r5, r5, #3
 80009c6:	3508      	adds	r5, #8
 80009c8:	2d0c      	cmp	r5, #12
 80009ca:	bf38      	it	cc
 80009cc:	250c      	movcc	r5, #12
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	4607      	mov	r7, r0
 80009d2:	db01      	blt.n	80009d8 <_malloc_r+0x1c>
 80009d4:	42a9      	cmp	r1, r5
 80009d6:	d905      	bls.n	80009e4 <_malloc_r+0x28>
 80009d8:	230c      	movs	r3, #12
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	2600      	movs	r6, #0
 80009de:	4630      	mov	r0, r6
 80009e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000ab8 <_malloc_r+0xfc>
 80009e8:	f000 f868 	bl	8000abc <__malloc_lock>
 80009ec:	f8d8 3000 	ldr.w	r3, [r8]
 80009f0:	461c      	mov	r4, r3
 80009f2:	bb5c      	cbnz	r4, 8000a4c <_malloc_r+0x90>
 80009f4:	4629      	mov	r1, r5
 80009f6:	4638      	mov	r0, r7
 80009f8:	f7ff ffc0 	bl	800097c <sbrk_aligned>
 80009fc:	1c43      	adds	r3, r0, #1
 80009fe:	4604      	mov	r4, r0
 8000a00:	d155      	bne.n	8000aae <_malloc_r+0xf2>
 8000a02:	f8d8 4000 	ldr.w	r4, [r8]
 8000a06:	4626      	mov	r6, r4
 8000a08:	2e00      	cmp	r6, #0
 8000a0a:	d145      	bne.n	8000a98 <_malloc_r+0xdc>
 8000a0c:	2c00      	cmp	r4, #0
 8000a0e:	d048      	beq.n	8000aa2 <_malloc_r+0xe6>
 8000a10:	6823      	ldr	r3, [r4, #0]
 8000a12:	4631      	mov	r1, r6
 8000a14:	4638      	mov	r0, r7
 8000a16:	eb04 0903 	add.w	r9, r4, r3
 8000a1a:	f000 fc73 	bl	8001304 <_sbrk_r>
 8000a1e:	4581      	cmp	r9, r0
 8000a20:	d13f      	bne.n	8000aa2 <_malloc_r+0xe6>
 8000a22:	6821      	ldr	r1, [r4, #0]
 8000a24:	1a6d      	subs	r5, r5, r1
 8000a26:	4629      	mov	r1, r5
 8000a28:	4638      	mov	r0, r7
 8000a2a:	f7ff ffa7 	bl	800097c <sbrk_aligned>
 8000a2e:	3001      	adds	r0, #1
 8000a30:	d037      	beq.n	8000aa2 <_malloc_r+0xe6>
 8000a32:	6823      	ldr	r3, [r4, #0]
 8000a34:	442b      	add	r3, r5
 8000a36:	6023      	str	r3, [r4, #0]
 8000a38:	f8d8 3000 	ldr.w	r3, [r8]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d038      	beq.n	8000ab2 <_malloc_r+0xf6>
 8000a40:	685a      	ldr	r2, [r3, #4]
 8000a42:	42a2      	cmp	r2, r4
 8000a44:	d12b      	bne.n	8000a9e <_malloc_r+0xe2>
 8000a46:	2200      	movs	r2, #0
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	e00f      	b.n	8000a6c <_malloc_r+0xb0>
 8000a4c:	6822      	ldr	r2, [r4, #0]
 8000a4e:	1b52      	subs	r2, r2, r5
 8000a50:	d41f      	bmi.n	8000a92 <_malloc_r+0xd6>
 8000a52:	2a0b      	cmp	r2, #11
 8000a54:	d917      	bls.n	8000a86 <_malloc_r+0xca>
 8000a56:	1961      	adds	r1, r4, r5
 8000a58:	42a3      	cmp	r3, r4
 8000a5a:	6025      	str	r5, [r4, #0]
 8000a5c:	bf18      	it	ne
 8000a5e:	6059      	strne	r1, [r3, #4]
 8000a60:	6863      	ldr	r3, [r4, #4]
 8000a62:	bf08      	it	eq
 8000a64:	f8c8 1000 	streq.w	r1, [r8]
 8000a68:	5162      	str	r2, [r4, r5]
 8000a6a:	604b      	str	r3, [r1, #4]
 8000a6c:	4638      	mov	r0, r7
 8000a6e:	f104 060b 	add.w	r6, r4, #11
 8000a72:	f000 f829 	bl	8000ac8 <__malloc_unlock>
 8000a76:	f026 0607 	bic.w	r6, r6, #7
 8000a7a:	1d23      	adds	r3, r4, #4
 8000a7c:	1af2      	subs	r2, r6, r3
 8000a7e:	d0ae      	beq.n	80009de <_malloc_r+0x22>
 8000a80:	1b9b      	subs	r3, r3, r6
 8000a82:	50a3      	str	r3, [r4, r2]
 8000a84:	e7ab      	b.n	80009de <_malloc_r+0x22>
 8000a86:	42a3      	cmp	r3, r4
 8000a88:	6862      	ldr	r2, [r4, #4]
 8000a8a:	d1dd      	bne.n	8000a48 <_malloc_r+0x8c>
 8000a8c:	f8c8 2000 	str.w	r2, [r8]
 8000a90:	e7ec      	b.n	8000a6c <_malloc_r+0xb0>
 8000a92:	4623      	mov	r3, r4
 8000a94:	6864      	ldr	r4, [r4, #4]
 8000a96:	e7ac      	b.n	80009f2 <_malloc_r+0x36>
 8000a98:	4634      	mov	r4, r6
 8000a9a:	6876      	ldr	r6, [r6, #4]
 8000a9c:	e7b4      	b.n	8000a08 <_malloc_r+0x4c>
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	e7cc      	b.n	8000a3c <_malloc_r+0x80>
 8000aa2:	230c      	movs	r3, #12
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	4638      	mov	r0, r7
 8000aa8:	f000 f80e 	bl	8000ac8 <__malloc_unlock>
 8000aac:	e797      	b.n	80009de <_malloc_r+0x22>
 8000aae:	6025      	str	r5, [r4, #0]
 8000ab0:	e7dc      	b.n	8000a6c <_malloc_r+0xb0>
 8000ab2:	605b      	str	r3, [r3, #4]
 8000ab4:	deff      	udf	#255	; 0xff
 8000ab6:	bf00      	nop
 8000ab8:	200001c8 	.word	0x200001c8

08000abc <__malloc_lock>:
 8000abc:	4801      	ldr	r0, [pc, #4]	; (8000ac4 <__malloc_lock+0x8>)
 8000abe:	f7ff bf0e 	b.w	80008de <__retarget_lock_acquire_recursive>
 8000ac2:	bf00      	nop
 8000ac4:	200001c4 	.word	0x200001c4

08000ac8 <__malloc_unlock>:
 8000ac8:	4801      	ldr	r0, [pc, #4]	; (8000ad0 <__malloc_unlock+0x8>)
 8000aca:	f7ff bf09 	b.w	80008e0 <__retarget_lock_release_recursive>
 8000ace:	bf00      	nop
 8000ad0:	200001c4 	.word	0x200001c4

08000ad4 <__sfputc_r>:
 8000ad4:	6893      	ldr	r3, [r2, #8]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	b410      	push	{r4}
 8000adc:	6093      	str	r3, [r2, #8]
 8000ade:	da08      	bge.n	8000af2 <__sfputc_r+0x1e>
 8000ae0:	6994      	ldr	r4, [r2, #24]
 8000ae2:	42a3      	cmp	r3, r4
 8000ae4:	db01      	blt.n	8000aea <__sfputc_r+0x16>
 8000ae6:	290a      	cmp	r1, #10
 8000ae8:	d103      	bne.n	8000af2 <__sfputc_r+0x1e>
 8000aea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000aee:	f000 bb73 	b.w	80011d8 <__swbuf_r>
 8000af2:	6813      	ldr	r3, [r2, #0]
 8000af4:	1c58      	adds	r0, r3, #1
 8000af6:	6010      	str	r0, [r2, #0]
 8000af8:	7019      	strb	r1, [r3, #0]
 8000afa:	4608      	mov	r0, r1
 8000afc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <__sfputs_r>:
 8000b02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b04:	4606      	mov	r6, r0
 8000b06:	460f      	mov	r7, r1
 8000b08:	4614      	mov	r4, r2
 8000b0a:	18d5      	adds	r5, r2, r3
 8000b0c:	42ac      	cmp	r4, r5
 8000b0e:	d101      	bne.n	8000b14 <__sfputs_r+0x12>
 8000b10:	2000      	movs	r0, #0
 8000b12:	e007      	b.n	8000b24 <__sfputs_r+0x22>
 8000b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b18:	463a      	mov	r2, r7
 8000b1a:	4630      	mov	r0, r6
 8000b1c:	f7ff ffda 	bl	8000ad4 <__sfputc_r>
 8000b20:	1c43      	adds	r3, r0, #1
 8000b22:	d1f3      	bne.n	8000b0c <__sfputs_r+0xa>
 8000b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b28 <_vfiprintf_r>:
 8000b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b2c:	460d      	mov	r5, r1
 8000b2e:	b09d      	sub	sp, #116	; 0x74
 8000b30:	4614      	mov	r4, r2
 8000b32:	4698      	mov	r8, r3
 8000b34:	4606      	mov	r6, r0
 8000b36:	b118      	cbz	r0, 8000b40 <_vfiprintf_r+0x18>
 8000b38:	6a03      	ldr	r3, [r0, #32]
 8000b3a:	b90b      	cbnz	r3, 8000b40 <_vfiprintf_r+0x18>
 8000b3c:	f7ff fdca 	bl	80006d4 <__sinit>
 8000b40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b42:	07d9      	lsls	r1, r3, #31
 8000b44:	d405      	bmi.n	8000b52 <_vfiprintf_r+0x2a>
 8000b46:	89ab      	ldrh	r3, [r5, #12]
 8000b48:	059a      	lsls	r2, r3, #22
 8000b4a:	d402      	bmi.n	8000b52 <_vfiprintf_r+0x2a>
 8000b4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b4e:	f7ff fec6 	bl	80008de <__retarget_lock_acquire_recursive>
 8000b52:	89ab      	ldrh	r3, [r5, #12]
 8000b54:	071b      	lsls	r3, r3, #28
 8000b56:	d501      	bpl.n	8000b5c <_vfiprintf_r+0x34>
 8000b58:	692b      	ldr	r3, [r5, #16]
 8000b5a:	b99b      	cbnz	r3, 8000b84 <_vfiprintf_r+0x5c>
 8000b5c:	4629      	mov	r1, r5
 8000b5e:	4630      	mov	r0, r6
 8000b60:	f000 fb78 	bl	8001254 <__swsetup_r>
 8000b64:	b170      	cbz	r0, 8000b84 <_vfiprintf_r+0x5c>
 8000b66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b68:	07dc      	lsls	r4, r3, #31
 8000b6a:	d504      	bpl.n	8000b76 <_vfiprintf_r+0x4e>
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b70:	b01d      	add	sp, #116	; 0x74
 8000b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b76:	89ab      	ldrh	r3, [r5, #12]
 8000b78:	0598      	lsls	r0, r3, #22
 8000b7a:	d4f7      	bmi.n	8000b6c <_vfiprintf_r+0x44>
 8000b7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b7e:	f7ff feaf 	bl	80008e0 <__retarget_lock_release_recursive>
 8000b82:	e7f3      	b.n	8000b6c <_vfiprintf_r+0x44>
 8000b84:	2300      	movs	r3, #0
 8000b86:	9309      	str	r3, [sp, #36]	; 0x24
 8000b88:	2320      	movs	r3, #32
 8000b8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000b8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b92:	2330      	movs	r3, #48	; 0x30
 8000b94:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000d48 <_vfiprintf_r+0x220>
 8000b98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000b9c:	f04f 0901 	mov.w	r9, #1
 8000ba0:	4623      	mov	r3, r4
 8000ba2:	469a      	mov	sl, r3
 8000ba4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ba8:	b10a      	cbz	r2, 8000bae <_vfiprintf_r+0x86>
 8000baa:	2a25      	cmp	r2, #37	; 0x25
 8000bac:	d1f9      	bne.n	8000ba2 <_vfiprintf_r+0x7a>
 8000bae:	ebba 0b04 	subs.w	fp, sl, r4
 8000bb2:	d00b      	beq.n	8000bcc <_vfiprintf_r+0xa4>
 8000bb4:	465b      	mov	r3, fp
 8000bb6:	4622      	mov	r2, r4
 8000bb8:	4629      	mov	r1, r5
 8000bba:	4630      	mov	r0, r6
 8000bbc:	f7ff ffa1 	bl	8000b02 <__sfputs_r>
 8000bc0:	3001      	adds	r0, #1
 8000bc2:	f000 80a9 	beq.w	8000d18 <_vfiprintf_r+0x1f0>
 8000bc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000bc8:	445a      	add	r2, fp
 8000bca:	9209      	str	r2, [sp, #36]	; 0x24
 8000bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	f000 80a1 	beq.w	8000d18 <_vfiprintf_r+0x1f0>
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000be0:	f10a 0a01 	add.w	sl, sl, #1
 8000be4:	9304      	str	r3, [sp, #16]
 8000be6:	9307      	str	r3, [sp, #28]
 8000be8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000bec:	931a      	str	r3, [sp, #104]	; 0x68
 8000bee:	4654      	mov	r4, sl
 8000bf0:	2205      	movs	r2, #5
 8000bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bf6:	4854      	ldr	r0, [pc, #336]	; (8000d48 <_vfiprintf_r+0x220>)
 8000bf8:	f7ff fb0a 	bl	8000210 <memchr>
 8000bfc:	9a04      	ldr	r2, [sp, #16]
 8000bfe:	b9d8      	cbnz	r0, 8000c38 <_vfiprintf_r+0x110>
 8000c00:	06d1      	lsls	r1, r2, #27
 8000c02:	bf44      	itt	mi
 8000c04:	2320      	movmi	r3, #32
 8000c06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c0a:	0713      	lsls	r3, r2, #28
 8000c0c:	bf44      	itt	mi
 8000c0e:	232b      	movmi	r3, #43	; 0x2b
 8000c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c14:	f89a 3000 	ldrb.w	r3, [sl]
 8000c18:	2b2a      	cmp	r3, #42	; 0x2a
 8000c1a:	d015      	beq.n	8000c48 <_vfiprintf_r+0x120>
 8000c1c:	9a07      	ldr	r2, [sp, #28]
 8000c1e:	4654      	mov	r4, sl
 8000c20:	2000      	movs	r0, #0
 8000c22:	f04f 0c0a 	mov.w	ip, #10
 8000c26:	4621      	mov	r1, r4
 8000c28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c2c:	3b30      	subs	r3, #48	; 0x30
 8000c2e:	2b09      	cmp	r3, #9
 8000c30:	d94d      	bls.n	8000cce <_vfiprintf_r+0x1a6>
 8000c32:	b1b0      	cbz	r0, 8000c62 <_vfiprintf_r+0x13a>
 8000c34:	9207      	str	r2, [sp, #28]
 8000c36:	e014      	b.n	8000c62 <_vfiprintf_r+0x13a>
 8000c38:	eba0 0308 	sub.w	r3, r0, r8
 8000c3c:	fa09 f303 	lsl.w	r3, r9, r3
 8000c40:	4313      	orrs	r3, r2
 8000c42:	9304      	str	r3, [sp, #16]
 8000c44:	46a2      	mov	sl, r4
 8000c46:	e7d2      	b.n	8000bee <_vfiprintf_r+0xc6>
 8000c48:	9b03      	ldr	r3, [sp, #12]
 8000c4a:	1d19      	adds	r1, r3, #4
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	9103      	str	r1, [sp, #12]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	bfbb      	ittet	lt
 8000c54:	425b      	neglt	r3, r3
 8000c56:	f042 0202 	orrlt.w	r2, r2, #2
 8000c5a:	9307      	strge	r3, [sp, #28]
 8000c5c:	9307      	strlt	r3, [sp, #28]
 8000c5e:	bfb8      	it	lt
 8000c60:	9204      	strlt	r2, [sp, #16]
 8000c62:	7823      	ldrb	r3, [r4, #0]
 8000c64:	2b2e      	cmp	r3, #46	; 0x2e
 8000c66:	d10c      	bne.n	8000c82 <_vfiprintf_r+0x15a>
 8000c68:	7863      	ldrb	r3, [r4, #1]
 8000c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8000c6c:	d134      	bne.n	8000cd8 <_vfiprintf_r+0x1b0>
 8000c6e:	9b03      	ldr	r3, [sp, #12]
 8000c70:	1d1a      	adds	r2, r3, #4
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	9203      	str	r2, [sp, #12]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	bfb8      	it	lt
 8000c7a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000c7e:	3402      	adds	r4, #2
 8000c80:	9305      	str	r3, [sp, #20]
 8000c82:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000d58 <_vfiprintf_r+0x230>
 8000c86:	7821      	ldrb	r1, [r4, #0]
 8000c88:	2203      	movs	r2, #3
 8000c8a:	4650      	mov	r0, sl
 8000c8c:	f7ff fac0 	bl	8000210 <memchr>
 8000c90:	b138      	cbz	r0, 8000ca2 <_vfiprintf_r+0x17a>
 8000c92:	9b04      	ldr	r3, [sp, #16]
 8000c94:	eba0 000a 	sub.w	r0, r0, sl
 8000c98:	2240      	movs	r2, #64	; 0x40
 8000c9a:	4082      	lsls	r2, r0
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	3401      	adds	r4, #1
 8000ca0:	9304      	str	r3, [sp, #16]
 8000ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ca6:	4829      	ldr	r0, [pc, #164]	; (8000d4c <_vfiprintf_r+0x224>)
 8000ca8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000cac:	2206      	movs	r2, #6
 8000cae:	f7ff faaf 	bl	8000210 <memchr>
 8000cb2:	2800      	cmp	r0, #0
 8000cb4:	d03f      	beq.n	8000d36 <_vfiprintf_r+0x20e>
 8000cb6:	4b26      	ldr	r3, [pc, #152]	; (8000d50 <_vfiprintf_r+0x228>)
 8000cb8:	bb1b      	cbnz	r3, 8000d02 <_vfiprintf_r+0x1da>
 8000cba:	9b03      	ldr	r3, [sp, #12]
 8000cbc:	3307      	adds	r3, #7
 8000cbe:	f023 0307 	bic.w	r3, r3, #7
 8000cc2:	3308      	adds	r3, #8
 8000cc4:	9303      	str	r3, [sp, #12]
 8000cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000cc8:	443b      	add	r3, r7
 8000cca:	9309      	str	r3, [sp, #36]	; 0x24
 8000ccc:	e768      	b.n	8000ba0 <_vfiprintf_r+0x78>
 8000cce:	fb0c 3202 	mla	r2, ip, r2, r3
 8000cd2:	460c      	mov	r4, r1
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	e7a6      	b.n	8000c26 <_vfiprintf_r+0xfe>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	3401      	adds	r4, #1
 8000cdc:	9305      	str	r3, [sp, #20]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f04f 0c0a 	mov.w	ip, #10
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000cea:	3a30      	subs	r2, #48	; 0x30
 8000cec:	2a09      	cmp	r2, #9
 8000cee:	d903      	bls.n	8000cf8 <_vfiprintf_r+0x1d0>
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d0c6      	beq.n	8000c82 <_vfiprintf_r+0x15a>
 8000cf4:	9105      	str	r1, [sp, #20]
 8000cf6:	e7c4      	b.n	8000c82 <_vfiprintf_r+0x15a>
 8000cf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8000cfc:	4604      	mov	r4, r0
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e7f0      	b.n	8000ce4 <_vfiprintf_r+0x1bc>
 8000d02:	ab03      	add	r3, sp, #12
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	462a      	mov	r2, r5
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <_vfiprintf_r+0x22c>)
 8000d0a:	a904      	add	r1, sp, #16
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	f3af 8000 	nop.w
 8000d12:	4607      	mov	r7, r0
 8000d14:	1c78      	adds	r0, r7, #1
 8000d16:	d1d6      	bne.n	8000cc6 <_vfiprintf_r+0x19e>
 8000d18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d1a:	07d9      	lsls	r1, r3, #31
 8000d1c:	d405      	bmi.n	8000d2a <_vfiprintf_r+0x202>
 8000d1e:	89ab      	ldrh	r3, [r5, #12]
 8000d20:	059a      	lsls	r2, r3, #22
 8000d22:	d402      	bmi.n	8000d2a <_vfiprintf_r+0x202>
 8000d24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d26:	f7ff fddb 	bl	80008e0 <__retarget_lock_release_recursive>
 8000d2a:	89ab      	ldrh	r3, [r5, #12]
 8000d2c:	065b      	lsls	r3, r3, #25
 8000d2e:	f53f af1d 	bmi.w	8000b6c <_vfiprintf_r+0x44>
 8000d32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d34:	e71c      	b.n	8000b70 <_vfiprintf_r+0x48>
 8000d36:	ab03      	add	r3, sp, #12
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	462a      	mov	r2, r5
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <_vfiprintf_r+0x22c>)
 8000d3e:	a904      	add	r1, sp, #16
 8000d40:	4630      	mov	r0, r6
 8000d42:	f000 f879 	bl	8000e38 <_printf_i>
 8000d46:	e7e4      	b.n	8000d12 <_vfiprintf_r+0x1ea>
 8000d48:	08001468 	.word	0x08001468
 8000d4c:	08001472 	.word	0x08001472
 8000d50:	00000000 	.word	0x00000000
 8000d54:	08000b03 	.word	0x08000b03
 8000d58:	0800146e 	.word	0x0800146e

08000d5c <_printf_common>:
 8000d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d60:	4616      	mov	r6, r2
 8000d62:	4699      	mov	r9, r3
 8000d64:	688a      	ldr	r2, [r1, #8]
 8000d66:	690b      	ldr	r3, [r1, #16]
 8000d68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	bfb8      	it	lt
 8000d70:	4613      	movlt	r3, r2
 8000d72:	6033      	str	r3, [r6, #0]
 8000d74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000d78:	4607      	mov	r7, r0
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	b10a      	cbz	r2, 8000d82 <_printf_common+0x26>
 8000d7e:	3301      	adds	r3, #1
 8000d80:	6033      	str	r3, [r6, #0]
 8000d82:	6823      	ldr	r3, [r4, #0]
 8000d84:	0699      	lsls	r1, r3, #26
 8000d86:	bf42      	ittt	mi
 8000d88:	6833      	ldrmi	r3, [r6, #0]
 8000d8a:	3302      	addmi	r3, #2
 8000d8c:	6033      	strmi	r3, [r6, #0]
 8000d8e:	6825      	ldr	r5, [r4, #0]
 8000d90:	f015 0506 	ands.w	r5, r5, #6
 8000d94:	d106      	bne.n	8000da4 <_printf_common+0x48>
 8000d96:	f104 0a19 	add.w	sl, r4, #25
 8000d9a:	68e3      	ldr	r3, [r4, #12]
 8000d9c:	6832      	ldr	r2, [r6, #0]
 8000d9e:	1a9b      	subs	r3, r3, r2
 8000da0:	42ab      	cmp	r3, r5
 8000da2:	dc26      	bgt.n	8000df2 <_printf_common+0x96>
 8000da4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000da8:	1e13      	subs	r3, r2, #0
 8000daa:	6822      	ldr	r2, [r4, #0]
 8000dac:	bf18      	it	ne
 8000dae:	2301      	movne	r3, #1
 8000db0:	0692      	lsls	r2, r2, #26
 8000db2:	d42b      	bmi.n	8000e0c <_printf_common+0xb0>
 8000db4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000db8:	4649      	mov	r1, r9
 8000dba:	4638      	mov	r0, r7
 8000dbc:	47c0      	blx	r8
 8000dbe:	3001      	adds	r0, #1
 8000dc0:	d01e      	beq.n	8000e00 <_printf_common+0xa4>
 8000dc2:	6823      	ldr	r3, [r4, #0]
 8000dc4:	6922      	ldr	r2, [r4, #16]
 8000dc6:	f003 0306 	and.w	r3, r3, #6
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	bf02      	ittt	eq
 8000dce:	68e5      	ldreq	r5, [r4, #12]
 8000dd0:	6833      	ldreq	r3, [r6, #0]
 8000dd2:	1aed      	subeq	r5, r5, r3
 8000dd4:	68a3      	ldr	r3, [r4, #8]
 8000dd6:	bf0c      	ite	eq
 8000dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ddc:	2500      	movne	r5, #0
 8000dde:	4293      	cmp	r3, r2
 8000de0:	bfc4      	itt	gt
 8000de2:	1a9b      	subgt	r3, r3, r2
 8000de4:	18ed      	addgt	r5, r5, r3
 8000de6:	2600      	movs	r6, #0
 8000de8:	341a      	adds	r4, #26
 8000dea:	42b5      	cmp	r5, r6
 8000dec:	d11a      	bne.n	8000e24 <_printf_common+0xc8>
 8000dee:	2000      	movs	r0, #0
 8000df0:	e008      	b.n	8000e04 <_printf_common+0xa8>
 8000df2:	2301      	movs	r3, #1
 8000df4:	4652      	mov	r2, sl
 8000df6:	4649      	mov	r1, r9
 8000df8:	4638      	mov	r0, r7
 8000dfa:	47c0      	blx	r8
 8000dfc:	3001      	adds	r0, #1
 8000dfe:	d103      	bne.n	8000e08 <_printf_common+0xac>
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	3501      	adds	r5, #1
 8000e0a:	e7c6      	b.n	8000d9a <_printf_common+0x3e>
 8000e0c:	18e1      	adds	r1, r4, r3
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	2030      	movs	r0, #48	; 0x30
 8000e12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000e16:	4422      	add	r2, r4
 8000e18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000e1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000e20:	3302      	adds	r3, #2
 8000e22:	e7c7      	b.n	8000db4 <_printf_common+0x58>
 8000e24:	2301      	movs	r3, #1
 8000e26:	4622      	mov	r2, r4
 8000e28:	4649      	mov	r1, r9
 8000e2a:	4638      	mov	r0, r7
 8000e2c:	47c0      	blx	r8
 8000e2e:	3001      	adds	r0, #1
 8000e30:	d0e6      	beq.n	8000e00 <_printf_common+0xa4>
 8000e32:	3601      	adds	r6, #1
 8000e34:	e7d9      	b.n	8000dea <_printf_common+0x8e>
	...

08000e38 <_printf_i>:
 8000e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e3c:	7e0f      	ldrb	r7, [r1, #24]
 8000e3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000e40:	2f78      	cmp	r7, #120	; 0x78
 8000e42:	4691      	mov	r9, r2
 8000e44:	4680      	mov	r8, r0
 8000e46:	460c      	mov	r4, r1
 8000e48:	469a      	mov	sl, r3
 8000e4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000e4e:	d807      	bhi.n	8000e60 <_printf_i+0x28>
 8000e50:	2f62      	cmp	r7, #98	; 0x62
 8000e52:	d80a      	bhi.n	8000e6a <_printf_i+0x32>
 8000e54:	2f00      	cmp	r7, #0
 8000e56:	f000 80d4 	beq.w	8001002 <_printf_i+0x1ca>
 8000e5a:	2f58      	cmp	r7, #88	; 0x58
 8000e5c:	f000 80c0 	beq.w	8000fe0 <_printf_i+0x1a8>
 8000e60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000e68:	e03a      	b.n	8000ee0 <_printf_i+0xa8>
 8000e6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000e6e:	2b15      	cmp	r3, #21
 8000e70:	d8f6      	bhi.n	8000e60 <_printf_i+0x28>
 8000e72:	a101      	add	r1, pc, #4	; (adr r1, 8000e78 <_printf_i+0x40>)
 8000e74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e78:	08000ed1 	.word	0x08000ed1
 8000e7c:	08000ee5 	.word	0x08000ee5
 8000e80:	08000e61 	.word	0x08000e61
 8000e84:	08000e61 	.word	0x08000e61
 8000e88:	08000e61 	.word	0x08000e61
 8000e8c:	08000e61 	.word	0x08000e61
 8000e90:	08000ee5 	.word	0x08000ee5
 8000e94:	08000e61 	.word	0x08000e61
 8000e98:	08000e61 	.word	0x08000e61
 8000e9c:	08000e61 	.word	0x08000e61
 8000ea0:	08000e61 	.word	0x08000e61
 8000ea4:	08000fe9 	.word	0x08000fe9
 8000ea8:	08000f11 	.word	0x08000f11
 8000eac:	08000fa3 	.word	0x08000fa3
 8000eb0:	08000e61 	.word	0x08000e61
 8000eb4:	08000e61 	.word	0x08000e61
 8000eb8:	0800100b 	.word	0x0800100b
 8000ebc:	08000e61 	.word	0x08000e61
 8000ec0:	08000f11 	.word	0x08000f11
 8000ec4:	08000e61 	.word	0x08000e61
 8000ec8:	08000e61 	.word	0x08000e61
 8000ecc:	08000fab 	.word	0x08000fab
 8000ed0:	682b      	ldr	r3, [r5, #0]
 8000ed2:	1d1a      	adds	r2, r3, #4
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	602a      	str	r2, [r5, #0]
 8000ed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e09f      	b.n	8001024 <_printf_i+0x1ec>
 8000ee4:	6820      	ldr	r0, [r4, #0]
 8000ee6:	682b      	ldr	r3, [r5, #0]
 8000ee8:	0607      	lsls	r7, r0, #24
 8000eea:	f103 0104 	add.w	r1, r3, #4
 8000eee:	6029      	str	r1, [r5, #0]
 8000ef0:	d501      	bpl.n	8000ef6 <_printf_i+0xbe>
 8000ef2:	681e      	ldr	r6, [r3, #0]
 8000ef4:	e003      	b.n	8000efe <_printf_i+0xc6>
 8000ef6:	0646      	lsls	r6, r0, #25
 8000ef8:	d5fb      	bpl.n	8000ef2 <_printf_i+0xba>
 8000efa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000efe:	2e00      	cmp	r6, #0
 8000f00:	da03      	bge.n	8000f0a <_printf_i+0xd2>
 8000f02:	232d      	movs	r3, #45	; 0x2d
 8000f04:	4276      	negs	r6, r6
 8000f06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f0a:	485a      	ldr	r0, [pc, #360]	; (8001074 <_printf_i+0x23c>)
 8000f0c:	230a      	movs	r3, #10
 8000f0e:	e012      	b.n	8000f36 <_printf_i+0xfe>
 8000f10:	682b      	ldr	r3, [r5, #0]
 8000f12:	6820      	ldr	r0, [r4, #0]
 8000f14:	1d19      	adds	r1, r3, #4
 8000f16:	6029      	str	r1, [r5, #0]
 8000f18:	0605      	lsls	r5, r0, #24
 8000f1a:	d501      	bpl.n	8000f20 <_printf_i+0xe8>
 8000f1c:	681e      	ldr	r6, [r3, #0]
 8000f1e:	e002      	b.n	8000f26 <_printf_i+0xee>
 8000f20:	0641      	lsls	r1, r0, #25
 8000f22:	d5fb      	bpl.n	8000f1c <_printf_i+0xe4>
 8000f24:	881e      	ldrh	r6, [r3, #0]
 8000f26:	4853      	ldr	r0, [pc, #332]	; (8001074 <_printf_i+0x23c>)
 8000f28:	2f6f      	cmp	r7, #111	; 0x6f
 8000f2a:	bf0c      	ite	eq
 8000f2c:	2308      	moveq	r3, #8
 8000f2e:	230a      	movne	r3, #10
 8000f30:	2100      	movs	r1, #0
 8000f32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000f36:	6865      	ldr	r5, [r4, #4]
 8000f38:	60a5      	str	r5, [r4, #8]
 8000f3a:	2d00      	cmp	r5, #0
 8000f3c:	bfa2      	ittt	ge
 8000f3e:	6821      	ldrge	r1, [r4, #0]
 8000f40:	f021 0104 	bicge.w	r1, r1, #4
 8000f44:	6021      	strge	r1, [r4, #0]
 8000f46:	b90e      	cbnz	r6, 8000f4c <_printf_i+0x114>
 8000f48:	2d00      	cmp	r5, #0
 8000f4a:	d04b      	beq.n	8000fe4 <_printf_i+0x1ac>
 8000f4c:	4615      	mov	r5, r2
 8000f4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8000f52:	fb03 6711 	mls	r7, r3, r1, r6
 8000f56:	5dc7      	ldrb	r7, [r0, r7]
 8000f58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000f5c:	4637      	mov	r7, r6
 8000f5e:	42bb      	cmp	r3, r7
 8000f60:	460e      	mov	r6, r1
 8000f62:	d9f4      	bls.n	8000f4e <_printf_i+0x116>
 8000f64:	2b08      	cmp	r3, #8
 8000f66:	d10b      	bne.n	8000f80 <_printf_i+0x148>
 8000f68:	6823      	ldr	r3, [r4, #0]
 8000f6a:	07de      	lsls	r6, r3, #31
 8000f6c:	d508      	bpl.n	8000f80 <_printf_i+0x148>
 8000f6e:	6923      	ldr	r3, [r4, #16]
 8000f70:	6861      	ldr	r1, [r4, #4]
 8000f72:	4299      	cmp	r1, r3
 8000f74:	bfde      	ittt	le
 8000f76:	2330      	movle	r3, #48	; 0x30
 8000f78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000f7c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8000f80:	1b52      	subs	r2, r2, r5
 8000f82:	6122      	str	r2, [r4, #16]
 8000f84:	f8cd a000 	str.w	sl, [sp]
 8000f88:	464b      	mov	r3, r9
 8000f8a:	aa03      	add	r2, sp, #12
 8000f8c:	4621      	mov	r1, r4
 8000f8e:	4640      	mov	r0, r8
 8000f90:	f7ff fee4 	bl	8000d5c <_printf_common>
 8000f94:	3001      	adds	r0, #1
 8000f96:	d14a      	bne.n	800102e <_printf_i+0x1f6>
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f9c:	b004      	add	sp, #16
 8000f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa2:	6823      	ldr	r3, [r4, #0]
 8000fa4:	f043 0320 	orr.w	r3, r3, #32
 8000fa8:	6023      	str	r3, [r4, #0]
 8000faa:	4833      	ldr	r0, [pc, #204]	; (8001078 <_printf_i+0x240>)
 8000fac:	2778      	movs	r7, #120	; 0x78
 8000fae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000fb2:	6823      	ldr	r3, [r4, #0]
 8000fb4:	6829      	ldr	r1, [r5, #0]
 8000fb6:	061f      	lsls	r7, r3, #24
 8000fb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8000fbc:	d402      	bmi.n	8000fc4 <_printf_i+0x18c>
 8000fbe:	065f      	lsls	r7, r3, #25
 8000fc0:	bf48      	it	mi
 8000fc2:	b2b6      	uxthmi	r6, r6
 8000fc4:	07df      	lsls	r7, r3, #31
 8000fc6:	bf48      	it	mi
 8000fc8:	f043 0320 	orrmi.w	r3, r3, #32
 8000fcc:	6029      	str	r1, [r5, #0]
 8000fce:	bf48      	it	mi
 8000fd0:	6023      	strmi	r3, [r4, #0]
 8000fd2:	b91e      	cbnz	r6, 8000fdc <_printf_i+0x1a4>
 8000fd4:	6823      	ldr	r3, [r4, #0]
 8000fd6:	f023 0320 	bic.w	r3, r3, #32
 8000fda:	6023      	str	r3, [r4, #0]
 8000fdc:	2310      	movs	r3, #16
 8000fde:	e7a7      	b.n	8000f30 <_printf_i+0xf8>
 8000fe0:	4824      	ldr	r0, [pc, #144]	; (8001074 <_printf_i+0x23c>)
 8000fe2:	e7e4      	b.n	8000fae <_printf_i+0x176>
 8000fe4:	4615      	mov	r5, r2
 8000fe6:	e7bd      	b.n	8000f64 <_printf_i+0x12c>
 8000fe8:	682b      	ldr	r3, [r5, #0]
 8000fea:	6826      	ldr	r6, [r4, #0]
 8000fec:	6961      	ldr	r1, [r4, #20]
 8000fee:	1d18      	adds	r0, r3, #4
 8000ff0:	6028      	str	r0, [r5, #0]
 8000ff2:	0635      	lsls	r5, r6, #24
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	d501      	bpl.n	8000ffc <_printf_i+0x1c4>
 8000ff8:	6019      	str	r1, [r3, #0]
 8000ffa:	e002      	b.n	8001002 <_printf_i+0x1ca>
 8000ffc:	0670      	lsls	r0, r6, #25
 8000ffe:	d5fb      	bpl.n	8000ff8 <_printf_i+0x1c0>
 8001000:	8019      	strh	r1, [r3, #0]
 8001002:	2300      	movs	r3, #0
 8001004:	6123      	str	r3, [r4, #16]
 8001006:	4615      	mov	r5, r2
 8001008:	e7bc      	b.n	8000f84 <_printf_i+0x14c>
 800100a:	682b      	ldr	r3, [r5, #0]
 800100c:	1d1a      	adds	r2, r3, #4
 800100e:	602a      	str	r2, [r5, #0]
 8001010:	681d      	ldr	r5, [r3, #0]
 8001012:	6862      	ldr	r2, [r4, #4]
 8001014:	2100      	movs	r1, #0
 8001016:	4628      	mov	r0, r5
 8001018:	f7ff f8fa 	bl	8000210 <memchr>
 800101c:	b108      	cbz	r0, 8001022 <_printf_i+0x1ea>
 800101e:	1b40      	subs	r0, r0, r5
 8001020:	6060      	str	r0, [r4, #4]
 8001022:	6863      	ldr	r3, [r4, #4]
 8001024:	6123      	str	r3, [r4, #16]
 8001026:	2300      	movs	r3, #0
 8001028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800102c:	e7aa      	b.n	8000f84 <_printf_i+0x14c>
 800102e:	6923      	ldr	r3, [r4, #16]
 8001030:	462a      	mov	r2, r5
 8001032:	4649      	mov	r1, r9
 8001034:	4640      	mov	r0, r8
 8001036:	47d0      	blx	sl
 8001038:	3001      	adds	r0, #1
 800103a:	d0ad      	beq.n	8000f98 <_printf_i+0x160>
 800103c:	6823      	ldr	r3, [r4, #0]
 800103e:	079b      	lsls	r3, r3, #30
 8001040:	d413      	bmi.n	800106a <_printf_i+0x232>
 8001042:	68e0      	ldr	r0, [r4, #12]
 8001044:	9b03      	ldr	r3, [sp, #12]
 8001046:	4298      	cmp	r0, r3
 8001048:	bfb8      	it	lt
 800104a:	4618      	movlt	r0, r3
 800104c:	e7a6      	b.n	8000f9c <_printf_i+0x164>
 800104e:	2301      	movs	r3, #1
 8001050:	4632      	mov	r2, r6
 8001052:	4649      	mov	r1, r9
 8001054:	4640      	mov	r0, r8
 8001056:	47d0      	blx	sl
 8001058:	3001      	adds	r0, #1
 800105a:	d09d      	beq.n	8000f98 <_printf_i+0x160>
 800105c:	3501      	adds	r5, #1
 800105e:	68e3      	ldr	r3, [r4, #12]
 8001060:	9903      	ldr	r1, [sp, #12]
 8001062:	1a5b      	subs	r3, r3, r1
 8001064:	42ab      	cmp	r3, r5
 8001066:	dcf2      	bgt.n	800104e <_printf_i+0x216>
 8001068:	e7eb      	b.n	8001042 <_printf_i+0x20a>
 800106a:	2500      	movs	r5, #0
 800106c:	f104 0619 	add.w	r6, r4, #25
 8001070:	e7f5      	b.n	800105e <_printf_i+0x226>
 8001072:	bf00      	nop
 8001074:	08001479 	.word	0x08001479
 8001078:	0800148a 	.word	0x0800148a

0800107c <__sflush_r>:
 800107c:	898a      	ldrh	r2, [r1, #12]
 800107e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001082:	4605      	mov	r5, r0
 8001084:	0710      	lsls	r0, r2, #28
 8001086:	460c      	mov	r4, r1
 8001088:	d458      	bmi.n	800113c <__sflush_r+0xc0>
 800108a:	684b      	ldr	r3, [r1, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	dc05      	bgt.n	800109c <__sflush_r+0x20>
 8001090:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001092:	2b00      	cmp	r3, #0
 8001094:	dc02      	bgt.n	800109c <__sflush_r+0x20>
 8001096:	2000      	movs	r0, #0
 8001098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800109c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800109e:	2e00      	cmp	r6, #0
 80010a0:	d0f9      	beq.n	8001096 <__sflush_r+0x1a>
 80010a2:	2300      	movs	r3, #0
 80010a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80010a8:	682f      	ldr	r7, [r5, #0]
 80010aa:	6a21      	ldr	r1, [r4, #32]
 80010ac:	602b      	str	r3, [r5, #0]
 80010ae:	d032      	beq.n	8001116 <__sflush_r+0x9a>
 80010b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80010b2:	89a3      	ldrh	r3, [r4, #12]
 80010b4:	075a      	lsls	r2, r3, #29
 80010b6:	d505      	bpl.n	80010c4 <__sflush_r+0x48>
 80010b8:	6863      	ldr	r3, [r4, #4]
 80010ba:	1ac0      	subs	r0, r0, r3
 80010bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80010be:	b10b      	cbz	r3, 80010c4 <__sflush_r+0x48>
 80010c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010c2:	1ac0      	subs	r0, r0, r3
 80010c4:	2300      	movs	r3, #0
 80010c6:	4602      	mov	r2, r0
 80010c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80010ca:	6a21      	ldr	r1, [r4, #32]
 80010cc:	4628      	mov	r0, r5
 80010ce:	47b0      	blx	r6
 80010d0:	1c43      	adds	r3, r0, #1
 80010d2:	89a3      	ldrh	r3, [r4, #12]
 80010d4:	d106      	bne.n	80010e4 <__sflush_r+0x68>
 80010d6:	6829      	ldr	r1, [r5, #0]
 80010d8:	291d      	cmp	r1, #29
 80010da:	d82b      	bhi.n	8001134 <__sflush_r+0xb8>
 80010dc:	4a29      	ldr	r2, [pc, #164]	; (8001184 <__sflush_r+0x108>)
 80010de:	410a      	asrs	r2, r1
 80010e0:	07d6      	lsls	r6, r2, #31
 80010e2:	d427      	bmi.n	8001134 <__sflush_r+0xb8>
 80010e4:	2200      	movs	r2, #0
 80010e6:	6062      	str	r2, [r4, #4]
 80010e8:	04d9      	lsls	r1, r3, #19
 80010ea:	6922      	ldr	r2, [r4, #16]
 80010ec:	6022      	str	r2, [r4, #0]
 80010ee:	d504      	bpl.n	80010fa <__sflush_r+0x7e>
 80010f0:	1c42      	adds	r2, r0, #1
 80010f2:	d101      	bne.n	80010f8 <__sflush_r+0x7c>
 80010f4:	682b      	ldr	r3, [r5, #0]
 80010f6:	b903      	cbnz	r3, 80010fa <__sflush_r+0x7e>
 80010f8:	6560      	str	r0, [r4, #84]	; 0x54
 80010fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80010fc:	602f      	str	r7, [r5, #0]
 80010fe:	2900      	cmp	r1, #0
 8001100:	d0c9      	beq.n	8001096 <__sflush_r+0x1a>
 8001102:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001106:	4299      	cmp	r1, r3
 8001108:	d002      	beq.n	8001110 <__sflush_r+0x94>
 800110a:	4628      	mov	r0, r5
 800110c:	f7ff fbea 	bl	80008e4 <_free_r>
 8001110:	2000      	movs	r0, #0
 8001112:	6360      	str	r0, [r4, #52]	; 0x34
 8001114:	e7c0      	b.n	8001098 <__sflush_r+0x1c>
 8001116:	2301      	movs	r3, #1
 8001118:	4628      	mov	r0, r5
 800111a:	47b0      	blx	r6
 800111c:	1c41      	adds	r1, r0, #1
 800111e:	d1c8      	bne.n	80010b2 <__sflush_r+0x36>
 8001120:	682b      	ldr	r3, [r5, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0c5      	beq.n	80010b2 <__sflush_r+0x36>
 8001126:	2b1d      	cmp	r3, #29
 8001128:	d001      	beq.n	800112e <__sflush_r+0xb2>
 800112a:	2b16      	cmp	r3, #22
 800112c:	d101      	bne.n	8001132 <__sflush_r+0xb6>
 800112e:	602f      	str	r7, [r5, #0]
 8001130:	e7b1      	b.n	8001096 <__sflush_r+0x1a>
 8001132:	89a3      	ldrh	r3, [r4, #12]
 8001134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001138:	81a3      	strh	r3, [r4, #12]
 800113a:	e7ad      	b.n	8001098 <__sflush_r+0x1c>
 800113c:	690f      	ldr	r7, [r1, #16]
 800113e:	2f00      	cmp	r7, #0
 8001140:	d0a9      	beq.n	8001096 <__sflush_r+0x1a>
 8001142:	0793      	lsls	r3, r2, #30
 8001144:	680e      	ldr	r6, [r1, #0]
 8001146:	bf08      	it	eq
 8001148:	694b      	ldreq	r3, [r1, #20]
 800114a:	600f      	str	r7, [r1, #0]
 800114c:	bf18      	it	ne
 800114e:	2300      	movne	r3, #0
 8001150:	eba6 0807 	sub.w	r8, r6, r7
 8001154:	608b      	str	r3, [r1, #8]
 8001156:	f1b8 0f00 	cmp.w	r8, #0
 800115a:	dd9c      	ble.n	8001096 <__sflush_r+0x1a>
 800115c:	6a21      	ldr	r1, [r4, #32]
 800115e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001160:	4643      	mov	r3, r8
 8001162:	463a      	mov	r2, r7
 8001164:	4628      	mov	r0, r5
 8001166:	47b0      	blx	r6
 8001168:	2800      	cmp	r0, #0
 800116a:	dc06      	bgt.n	800117a <__sflush_r+0xfe>
 800116c:	89a3      	ldrh	r3, [r4, #12]
 800116e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001172:	81a3      	strh	r3, [r4, #12]
 8001174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001178:	e78e      	b.n	8001098 <__sflush_r+0x1c>
 800117a:	4407      	add	r7, r0
 800117c:	eba8 0800 	sub.w	r8, r8, r0
 8001180:	e7e9      	b.n	8001156 <__sflush_r+0xda>
 8001182:	bf00      	nop
 8001184:	dfbffffe 	.word	0xdfbffffe

08001188 <_fflush_r>:
 8001188:	b538      	push	{r3, r4, r5, lr}
 800118a:	690b      	ldr	r3, [r1, #16]
 800118c:	4605      	mov	r5, r0
 800118e:	460c      	mov	r4, r1
 8001190:	b913      	cbnz	r3, 8001198 <_fflush_r+0x10>
 8001192:	2500      	movs	r5, #0
 8001194:	4628      	mov	r0, r5
 8001196:	bd38      	pop	{r3, r4, r5, pc}
 8001198:	b118      	cbz	r0, 80011a2 <_fflush_r+0x1a>
 800119a:	6a03      	ldr	r3, [r0, #32]
 800119c:	b90b      	cbnz	r3, 80011a2 <_fflush_r+0x1a>
 800119e:	f7ff fa99 	bl	80006d4 <__sinit>
 80011a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0f3      	beq.n	8001192 <_fflush_r+0xa>
 80011aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80011ac:	07d0      	lsls	r0, r2, #31
 80011ae:	d404      	bmi.n	80011ba <_fflush_r+0x32>
 80011b0:	0599      	lsls	r1, r3, #22
 80011b2:	d402      	bmi.n	80011ba <_fflush_r+0x32>
 80011b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80011b6:	f7ff fb92 	bl	80008de <__retarget_lock_acquire_recursive>
 80011ba:	4628      	mov	r0, r5
 80011bc:	4621      	mov	r1, r4
 80011be:	f7ff ff5d 	bl	800107c <__sflush_r>
 80011c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80011c4:	07da      	lsls	r2, r3, #31
 80011c6:	4605      	mov	r5, r0
 80011c8:	d4e4      	bmi.n	8001194 <_fflush_r+0xc>
 80011ca:	89a3      	ldrh	r3, [r4, #12]
 80011cc:	059b      	lsls	r3, r3, #22
 80011ce:	d4e1      	bmi.n	8001194 <_fflush_r+0xc>
 80011d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80011d2:	f7ff fb85 	bl	80008e0 <__retarget_lock_release_recursive>
 80011d6:	e7dd      	b.n	8001194 <_fflush_r+0xc>

080011d8 <__swbuf_r>:
 80011d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011da:	460e      	mov	r6, r1
 80011dc:	4614      	mov	r4, r2
 80011de:	4605      	mov	r5, r0
 80011e0:	b118      	cbz	r0, 80011ea <__swbuf_r+0x12>
 80011e2:	6a03      	ldr	r3, [r0, #32]
 80011e4:	b90b      	cbnz	r3, 80011ea <__swbuf_r+0x12>
 80011e6:	f7ff fa75 	bl	80006d4 <__sinit>
 80011ea:	69a3      	ldr	r3, [r4, #24]
 80011ec:	60a3      	str	r3, [r4, #8]
 80011ee:	89a3      	ldrh	r3, [r4, #12]
 80011f0:	071a      	lsls	r2, r3, #28
 80011f2:	d525      	bpl.n	8001240 <__swbuf_r+0x68>
 80011f4:	6923      	ldr	r3, [r4, #16]
 80011f6:	b31b      	cbz	r3, 8001240 <__swbuf_r+0x68>
 80011f8:	6823      	ldr	r3, [r4, #0]
 80011fa:	6922      	ldr	r2, [r4, #16]
 80011fc:	1a98      	subs	r0, r3, r2
 80011fe:	6963      	ldr	r3, [r4, #20]
 8001200:	b2f6      	uxtb	r6, r6
 8001202:	4283      	cmp	r3, r0
 8001204:	4637      	mov	r7, r6
 8001206:	dc04      	bgt.n	8001212 <__swbuf_r+0x3a>
 8001208:	4621      	mov	r1, r4
 800120a:	4628      	mov	r0, r5
 800120c:	f7ff ffbc 	bl	8001188 <_fflush_r>
 8001210:	b9e0      	cbnz	r0, 800124c <__swbuf_r+0x74>
 8001212:	68a3      	ldr	r3, [r4, #8]
 8001214:	3b01      	subs	r3, #1
 8001216:	60a3      	str	r3, [r4, #8]
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	6022      	str	r2, [r4, #0]
 800121e:	701e      	strb	r6, [r3, #0]
 8001220:	6962      	ldr	r2, [r4, #20]
 8001222:	1c43      	adds	r3, r0, #1
 8001224:	429a      	cmp	r2, r3
 8001226:	d004      	beq.n	8001232 <__swbuf_r+0x5a>
 8001228:	89a3      	ldrh	r3, [r4, #12]
 800122a:	07db      	lsls	r3, r3, #31
 800122c:	d506      	bpl.n	800123c <__swbuf_r+0x64>
 800122e:	2e0a      	cmp	r6, #10
 8001230:	d104      	bne.n	800123c <__swbuf_r+0x64>
 8001232:	4621      	mov	r1, r4
 8001234:	4628      	mov	r0, r5
 8001236:	f7ff ffa7 	bl	8001188 <_fflush_r>
 800123a:	b938      	cbnz	r0, 800124c <__swbuf_r+0x74>
 800123c:	4638      	mov	r0, r7
 800123e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001240:	4621      	mov	r1, r4
 8001242:	4628      	mov	r0, r5
 8001244:	f000 f806 	bl	8001254 <__swsetup_r>
 8001248:	2800      	cmp	r0, #0
 800124a:	d0d5      	beq.n	80011f8 <__swbuf_r+0x20>
 800124c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001250:	e7f4      	b.n	800123c <__swbuf_r+0x64>
	...

08001254 <__swsetup_r>:
 8001254:	b538      	push	{r3, r4, r5, lr}
 8001256:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <__swsetup_r+0xac>)
 8001258:	4605      	mov	r5, r0
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	460c      	mov	r4, r1
 800125e:	b118      	cbz	r0, 8001268 <__swsetup_r+0x14>
 8001260:	6a03      	ldr	r3, [r0, #32]
 8001262:	b90b      	cbnz	r3, 8001268 <__swsetup_r+0x14>
 8001264:	f7ff fa36 	bl	80006d4 <__sinit>
 8001268:	89a3      	ldrh	r3, [r4, #12]
 800126a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800126e:	0718      	lsls	r0, r3, #28
 8001270:	d422      	bmi.n	80012b8 <__swsetup_r+0x64>
 8001272:	06d9      	lsls	r1, r3, #27
 8001274:	d407      	bmi.n	8001286 <__swsetup_r+0x32>
 8001276:	2309      	movs	r3, #9
 8001278:	602b      	str	r3, [r5, #0]
 800127a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800127e:	81a3      	strh	r3, [r4, #12]
 8001280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001284:	e034      	b.n	80012f0 <__swsetup_r+0x9c>
 8001286:	0758      	lsls	r0, r3, #29
 8001288:	d512      	bpl.n	80012b0 <__swsetup_r+0x5c>
 800128a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800128c:	b141      	cbz	r1, 80012a0 <__swsetup_r+0x4c>
 800128e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001292:	4299      	cmp	r1, r3
 8001294:	d002      	beq.n	800129c <__swsetup_r+0x48>
 8001296:	4628      	mov	r0, r5
 8001298:	f7ff fb24 	bl	80008e4 <_free_r>
 800129c:	2300      	movs	r3, #0
 800129e:	6363      	str	r3, [r4, #52]	; 0x34
 80012a0:	89a3      	ldrh	r3, [r4, #12]
 80012a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80012a6:	81a3      	strh	r3, [r4, #12]
 80012a8:	2300      	movs	r3, #0
 80012aa:	6063      	str	r3, [r4, #4]
 80012ac:	6923      	ldr	r3, [r4, #16]
 80012ae:	6023      	str	r3, [r4, #0]
 80012b0:	89a3      	ldrh	r3, [r4, #12]
 80012b2:	f043 0308 	orr.w	r3, r3, #8
 80012b6:	81a3      	strh	r3, [r4, #12]
 80012b8:	6923      	ldr	r3, [r4, #16]
 80012ba:	b94b      	cbnz	r3, 80012d0 <__swsetup_r+0x7c>
 80012bc:	89a3      	ldrh	r3, [r4, #12]
 80012be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80012c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012c6:	d003      	beq.n	80012d0 <__swsetup_r+0x7c>
 80012c8:	4621      	mov	r1, r4
 80012ca:	4628      	mov	r0, r5
 80012cc:	f000 f850 	bl	8001370 <__smakebuf_r>
 80012d0:	89a0      	ldrh	r0, [r4, #12]
 80012d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80012d6:	f010 0301 	ands.w	r3, r0, #1
 80012da:	d00a      	beq.n	80012f2 <__swsetup_r+0x9e>
 80012dc:	2300      	movs	r3, #0
 80012de:	60a3      	str	r3, [r4, #8]
 80012e0:	6963      	ldr	r3, [r4, #20]
 80012e2:	425b      	negs	r3, r3
 80012e4:	61a3      	str	r3, [r4, #24]
 80012e6:	6923      	ldr	r3, [r4, #16]
 80012e8:	b943      	cbnz	r3, 80012fc <__swsetup_r+0xa8>
 80012ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80012ee:	d1c4      	bne.n	800127a <__swsetup_r+0x26>
 80012f0:	bd38      	pop	{r3, r4, r5, pc}
 80012f2:	0781      	lsls	r1, r0, #30
 80012f4:	bf58      	it	pl
 80012f6:	6963      	ldrpl	r3, [r4, #20]
 80012f8:	60a3      	str	r3, [r4, #8]
 80012fa:	e7f4      	b.n	80012e6 <__swsetup_r+0x92>
 80012fc:	2000      	movs	r0, #0
 80012fe:	e7f7      	b.n	80012f0 <__swsetup_r+0x9c>
 8001300:	2000005c 	.word	0x2000005c

08001304 <_sbrk_r>:
 8001304:	b538      	push	{r3, r4, r5, lr}
 8001306:	4d06      	ldr	r5, [pc, #24]	; (8001320 <_sbrk_r+0x1c>)
 8001308:	2300      	movs	r3, #0
 800130a:	4604      	mov	r4, r0
 800130c:	4608      	mov	r0, r1
 800130e:	602b      	str	r3, [r5, #0]
 8001310:	f7ff f8ce 	bl	80004b0 <_sbrk>
 8001314:	1c43      	adds	r3, r0, #1
 8001316:	d102      	bne.n	800131e <_sbrk_r+0x1a>
 8001318:	682b      	ldr	r3, [r5, #0]
 800131a:	b103      	cbz	r3, 800131e <_sbrk_r+0x1a>
 800131c:	6023      	str	r3, [r4, #0]
 800131e:	bd38      	pop	{r3, r4, r5, pc}
 8001320:	200001c0 	.word	0x200001c0

08001324 <__swhatbuf_r>:
 8001324:	b570      	push	{r4, r5, r6, lr}
 8001326:	460c      	mov	r4, r1
 8001328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800132c:	2900      	cmp	r1, #0
 800132e:	b096      	sub	sp, #88	; 0x58
 8001330:	4615      	mov	r5, r2
 8001332:	461e      	mov	r6, r3
 8001334:	da0d      	bge.n	8001352 <__swhatbuf_r+0x2e>
 8001336:	89a3      	ldrh	r3, [r4, #12]
 8001338:	f013 0f80 	tst.w	r3, #128	; 0x80
 800133c:	f04f 0100 	mov.w	r1, #0
 8001340:	bf0c      	ite	eq
 8001342:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001346:	2340      	movne	r3, #64	; 0x40
 8001348:	2000      	movs	r0, #0
 800134a:	6031      	str	r1, [r6, #0]
 800134c:	602b      	str	r3, [r5, #0]
 800134e:	b016      	add	sp, #88	; 0x58
 8001350:	bd70      	pop	{r4, r5, r6, pc}
 8001352:	466a      	mov	r2, sp
 8001354:	f000 f848 	bl	80013e8 <_fstat_r>
 8001358:	2800      	cmp	r0, #0
 800135a:	dbec      	blt.n	8001336 <__swhatbuf_r+0x12>
 800135c:	9901      	ldr	r1, [sp, #4]
 800135e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001362:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001366:	4259      	negs	r1, r3
 8001368:	4159      	adcs	r1, r3
 800136a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800136e:	e7eb      	b.n	8001348 <__swhatbuf_r+0x24>

08001370 <__smakebuf_r>:
 8001370:	898b      	ldrh	r3, [r1, #12]
 8001372:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001374:	079d      	lsls	r5, r3, #30
 8001376:	4606      	mov	r6, r0
 8001378:	460c      	mov	r4, r1
 800137a:	d507      	bpl.n	800138c <__smakebuf_r+0x1c>
 800137c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001380:	6023      	str	r3, [r4, #0]
 8001382:	6123      	str	r3, [r4, #16]
 8001384:	2301      	movs	r3, #1
 8001386:	6163      	str	r3, [r4, #20]
 8001388:	b002      	add	sp, #8
 800138a:	bd70      	pop	{r4, r5, r6, pc}
 800138c:	ab01      	add	r3, sp, #4
 800138e:	466a      	mov	r2, sp
 8001390:	f7ff ffc8 	bl	8001324 <__swhatbuf_r>
 8001394:	9900      	ldr	r1, [sp, #0]
 8001396:	4605      	mov	r5, r0
 8001398:	4630      	mov	r0, r6
 800139a:	f7ff fb0f 	bl	80009bc <_malloc_r>
 800139e:	b948      	cbnz	r0, 80013b4 <__smakebuf_r+0x44>
 80013a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013a4:	059a      	lsls	r2, r3, #22
 80013a6:	d4ef      	bmi.n	8001388 <__smakebuf_r+0x18>
 80013a8:	f023 0303 	bic.w	r3, r3, #3
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	81a3      	strh	r3, [r4, #12]
 80013b2:	e7e3      	b.n	800137c <__smakebuf_r+0xc>
 80013b4:	89a3      	ldrh	r3, [r4, #12]
 80013b6:	6020      	str	r0, [r4, #0]
 80013b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013bc:	81a3      	strh	r3, [r4, #12]
 80013be:	9b00      	ldr	r3, [sp, #0]
 80013c0:	6163      	str	r3, [r4, #20]
 80013c2:	9b01      	ldr	r3, [sp, #4]
 80013c4:	6120      	str	r0, [r4, #16]
 80013c6:	b15b      	cbz	r3, 80013e0 <__smakebuf_r+0x70>
 80013c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80013cc:	4630      	mov	r0, r6
 80013ce:	f000 f81d 	bl	800140c <_isatty_r>
 80013d2:	b128      	cbz	r0, 80013e0 <__smakebuf_r+0x70>
 80013d4:	89a3      	ldrh	r3, [r4, #12]
 80013d6:	f023 0303 	bic.w	r3, r3, #3
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	81a3      	strh	r3, [r4, #12]
 80013e0:	89a3      	ldrh	r3, [r4, #12]
 80013e2:	431d      	orrs	r5, r3
 80013e4:	81a5      	strh	r5, [r4, #12]
 80013e6:	e7cf      	b.n	8001388 <__smakebuf_r+0x18>

080013e8 <_fstat_r>:
 80013e8:	b538      	push	{r3, r4, r5, lr}
 80013ea:	4d07      	ldr	r5, [pc, #28]	; (8001408 <_fstat_r+0x20>)
 80013ec:	2300      	movs	r3, #0
 80013ee:	4604      	mov	r4, r0
 80013f0:	4608      	mov	r0, r1
 80013f2:	4611      	mov	r1, r2
 80013f4:	602b      	str	r3, [r5, #0]
 80013f6:	f7ff f833 	bl	8000460 <_fstat>
 80013fa:	1c43      	adds	r3, r0, #1
 80013fc:	d102      	bne.n	8001404 <_fstat_r+0x1c>
 80013fe:	682b      	ldr	r3, [r5, #0]
 8001400:	b103      	cbz	r3, 8001404 <_fstat_r+0x1c>
 8001402:	6023      	str	r3, [r4, #0]
 8001404:	bd38      	pop	{r3, r4, r5, pc}
 8001406:	bf00      	nop
 8001408:	200001c0 	.word	0x200001c0

0800140c <_isatty_r>:
 800140c:	b538      	push	{r3, r4, r5, lr}
 800140e:	4d06      	ldr	r5, [pc, #24]	; (8001428 <_isatty_r+0x1c>)
 8001410:	2300      	movs	r3, #0
 8001412:	4604      	mov	r4, r0
 8001414:	4608      	mov	r0, r1
 8001416:	602b      	str	r3, [r5, #0]
 8001418:	f7ff f832 	bl	8000480 <_isatty>
 800141c:	1c43      	adds	r3, r0, #1
 800141e:	d102      	bne.n	8001426 <_isatty_r+0x1a>
 8001420:	682b      	ldr	r3, [r5, #0]
 8001422:	b103      	cbz	r3, 8001426 <_isatty_r+0x1a>
 8001424:	6023      	str	r3, [r4, #0]
 8001426:	bd38      	pop	{r3, r4, r5, pc}
 8001428:	200001c0 	.word	0x200001c0

0800142c <_init>:
 800142c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800142e:	bf00      	nop
 8001430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001432:	bc08      	pop	{r3}
 8001434:	469e      	mov	lr, r3
 8001436:	4770      	bx	lr

08001438 <_fini>:
 8001438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800143a:	bf00      	nop
 800143c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800143e:	bc08      	pop	{r3}
 8001440:	469e      	mov	lr, r3
 8001442:	4770      	bx	lr
